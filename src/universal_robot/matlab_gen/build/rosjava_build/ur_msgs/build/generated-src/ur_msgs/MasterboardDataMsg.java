package ur_msgs;

public interface MasterboardDataMsg extends org.ros.internal.message.Message {
  static final java.lang.String _TYPE = "ur_msgs/MasterboardDataMsg";
  static final java.lang.String _DEFINITION = "# This data structure contains the MasterboardData structure\n# used by the Universal Robots controller\n#\n# MasterboardData is part of the data structure being send on the \n# secondary client communications interface\n# \n# This data structure is send at 10 Hz on TCP port 30002\n# \n# Dokumentation can be found on the Universal Robots Support Wiki\n# (http://wiki03.lynero.net/Technical/DataStreamFromURController?rev=8)\n\nint16 digital_input_bits\nint16 digital_output_bits\nint8 analog_input_range0\nint8 analog_input_range1\nfloat64 analog_input0\nfloat64 analog_input1\nint8 analog_output_domain0\nint8 analog_output_domain1\nfloat64 analog_output0\nfloat64 analog_output1\nfloat32 masterboard_temperature\nfloat32 robot_voltage_48V\nfloat32 robot_current\nfloat32 master_io_current\nuint8 master_safety_state\nuint8 master_onoff_state\n";
  static final boolean _IS_SERVICE = false;
  static final boolean _IS_ACTION = false;
  short getDigitalInputBits();
  void setDigitalInputBits(short value);
  short getDigitalOutputBits();
  void setDigitalOutputBits(short value);
  byte getAnalogInputRange0();
  void setAnalogInputRange0(byte value);
  byte getAnalogInputRange1();
  void setAnalogInputRange1(byte value);
  double getAnalogInput0();
  void setAnalogInput0(double value);
  double getAnalogInput1();
  void setAnalogInput1(double value);
  byte getAnalogOutputDomain0();
  void setAnalogOutputDomain0(byte value);
  byte getAnalogOutputDomain1();
  void setAnalogOutputDomain1(byte value);
  double getAnalogOutput0();
  void setAnalogOutput0(double value);
  double getAnalogOutput1();
  void setAnalogOutput1(double value);
  float getMasterboardTemperature();
  void setMasterboardTemperature(float value);
  float getRobotVoltage48V();
  void setRobotVoltage48V(float value);
  float getRobotCurrent();
  void setRobotCurrent(float value);
  float getMasterIoCurrent();
  void setMasterIoCurrent(float value);
  byte getMasterSafetyState();
  void setMasterSafetyState(byte value);
  byte getMasterOnoffState();
  void setMasterOnoffState(byte value);
}
