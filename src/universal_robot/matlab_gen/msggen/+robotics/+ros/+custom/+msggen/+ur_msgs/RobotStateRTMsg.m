classdef RobotStateRTMsg < robotics.ros.Message
    %RobotStateRTMsg MATLAB implementation of ur_msgs/RobotStateRTMsg
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'ur_msgs/RobotStateRTMsg' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ce6feddd3ccb4ca7dbcd0ff105b603c7' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Time
        DigitalInputBits
        ControllerTimer
        TestValue
        RobotMode
        QTarget
        QdTarget
        QddTarget
        ITarget
        MTarget
        QActual
        QdActual
        IActual
        ToolAccValues
        TcpForce
        ToolVector
        TcpSpeed
        MotorTemperatures
        JointModes
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ControllerTimer', 'DigitalInputBits', 'IActual', 'ITarget', 'JointModes', 'MTarget', 'MotorTemperatures', 'QActual', 'QTarget', 'QdActual', 'QdTarget', 'QddTarget', 'RobotMode', 'TcpForce', 'TcpSpeed', 'TestValue', 'Time', 'ToolAccValues', 'ToolVector'} % List of non-constant message properties
        ROSPropertyList = {'controller_timer', 'digital_input_bits', 'i_actual', 'i_target', 'joint_modes', 'm_target', 'motor_temperatures', 'q_actual', 'q_target', 'qd_actual', 'qd_target', 'qdd_target', 'robot_mode', 'tcp_force', 'tcp_speed', 'test_value', 'time', 'tool_acc_values', 'tool_vector'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RobotStateRTMsg(msg)
            %RobotStateRTMsg Construct the message object RobotStateRTMsg
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function time = get.Time(obj)
            %get.Time Get the value for property Time
            time = double(obj.JavaMessage.getTime);
        end
        
        function set.Time(obj, time)
            %set.Time Set the value for property Time
            validateattributes(time, {'numeric'}, {'nonempty', 'scalar'}, 'RobotStateRTMsg', 'Time');
            
            obj.JavaMessage.setTime(time);
        end
        
        function digitalinputbits = get.DigitalInputBits(obj)
            %get.DigitalInputBits Get the value for property DigitalInputBits
            digitalinputbits = double(obj.JavaMessage.getDigitalInputBits);
        end
        
        function set.DigitalInputBits(obj, digitalinputbits)
            %set.DigitalInputBits Set the value for property DigitalInputBits
            validateattributes(digitalinputbits, {'numeric'}, {'nonempty', 'scalar'}, 'RobotStateRTMsg', 'DigitalInputBits');
            
            obj.JavaMessage.setDigitalInputBits(digitalinputbits);
        end
        
        function controllertimer = get.ControllerTimer(obj)
            %get.ControllerTimer Get the value for property ControllerTimer
            controllertimer = double(obj.JavaMessage.getControllerTimer);
        end
        
        function set.ControllerTimer(obj, controllertimer)
            %set.ControllerTimer Set the value for property ControllerTimer
            validateattributes(controllertimer, {'numeric'}, {'nonempty', 'scalar'}, 'RobotStateRTMsg', 'ControllerTimer');
            
            obj.JavaMessage.setControllerTimer(controllertimer);
        end
        
        function testvalue = get.TestValue(obj)
            %get.TestValue Get the value for property TestValue
            testvalue = double(obj.JavaMessage.getTestValue);
        end
        
        function set.TestValue(obj, testvalue)
            %set.TestValue Set the value for property TestValue
            validateattributes(testvalue, {'numeric'}, {'nonempty', 'scalar'}, 'RobotStateRTMsg', 'TestValue');
            
            obj.JavaMessage.setTestValue(testvalue);
        end
        
        function robotmode = get.RobotMode(obj)
            %get.RobotMode Get the value for property RobotMode
            robotmode = double(obj.JavaMessage.getRobotMode);
        end
        
        function set.RobotMode(obj, robotmode)
            %set.RobotMode Set the value for property RobotMode
            validateattributes(robotmode, {'numeric'}, {'nonempty', 'scalar'}, 'RobotStateRTMsg', 'RobotMode');
            
            obj.JavaMessage.setRobotMode(robotmode);
        end
        
        function qtarget = get.QTarget(obj)
            %get.QTarget Get the value for property QTarget
            javaArray = obj.JavaMessage.getQTarget;
            array = obj.readJavaArray(javaArray, 'double');
            qtarget = double(array);
        end
        
        function set.QTarget(obj, qtarget)
            %set.QTarget Set the value for property QTarget
            if ~isvector(qtarget) && isempty(qtarget)
                % Allow empty [] input
                qtarget = double.empty(0,1);
            end
            
            validateattributes(qtarget, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'QTarget');
            
            javaArray = obj.JavaMessage.getQTarget;
            array = obj.writeJavaArray(qtarget, javaArray, 'double');
            obj.JavaMessage.setQTarget(array);
        end
        
        function qdtarget = get.QdTarget(obj)
            %get.QdTarget Get the value for property QdTarget
            javaArray = obj.JavaMessage.getQdTarget;
            array = obj.readJavaArray(javaArray, 'double');
            qdtarget = double(array);
        end
        
        function set.QdTarget(obj, qdtarget)
            %set.QdTarget Set the value for property QdTarget
            if ~isvector(qdtarget) && isempty(qdtarget)
                % Allow empty [] input
                qdtarget = double.empty(0,1);
            end
            
            validateattributes(qdtarget, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'QdTarget');
            
            javaArray = obj.JavaMessage.getQdTarget;
            array = obj.writeJavaArray(qdtarget, javaArray, 'double');
            obj.JavaMessage.setQdTarget(array);
        end
        
        function qddtarget = get.QddTarget(obj)
            %get.QddTarget Get the value for property QddTarget
            javaArray = obj.JavaMessage.getQddTarget;
            array = obj.readJavaArray(javaArray, 'double');
            qddtarget = double(array);
        end
        
        function set.QddTarget(obj, qddtarget)
            %set.QddTarget Set the value for property QddTarget
            if ~isvector(qddtarget) && isempty(qddtarget)
                % Allow empty [] input
                qddtarget = double.empty(0,1);
            end
            
            validateattributes(qddtarget, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'QddTarget');
            
            javaArray = obj.JavaMessage.getQddTarget;
            array = obj.writeJavaArray(qddtarget, javaArray, 'double');
            obj.JavaMessage.setQddTarget(array);
        end
        
        function itarget = get.ITarget(obj)
            %get.ITarget Get the value for property ITarget
            javaArray = obj.JavaMessage.getITarget;
            array = obj.readJavaArray(javaArray, 'double');
            itarget = double(array);
        end
        
        function set.ITarget(obj, itarget)
            %set.ITarget Set the value for property ITarget
            if ~isvector(itarget) && isempty(itarget)
                % Allow empty [] input
                itarget = double.empty(0,1);
            end
            
            validateattributes(itarget, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'ITarget');
            
            javaArray = obj.JavaMessage.getITarget;
            array = obj.writeJavaArray(itarget, javaArray, 'double');
            obj.JavaMessage.setITarget(array);
        end
        
        function mtarget = get.MTarget(obj)
            %get.MTarget Get the value for property MTarget
            javaArray = obj.JavaMessage.getMTarget;
            array = obj.readJavaArray(javaArray, 'double');
            mtarget = double(array);
        end
        
        function set.MTarget(obj, mtarget)
            %set.MTarget Set the value for property MTarget
            if ~isvector(mtarget) && isempty(mtarget)
                % Allow empty [] input
                mtarget = double.empty(0,1);
            end
            
            validateattributes(mtarget, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'MTarget');
            
            javaArray = obj.JavaMessage.getMTarget;
            array = obj.writeJavaArray(mtarget, javaArray, 'double');
            obj.JavaMessage.setMTarget(array);
        end
        
        function qactual = get.QActual(obj)
            %get.QActual Get the value for property QActual
            javaArray = obj.JavaMessage.getQActual;
            array = obj.readJavaArray(javaArray, 'double');
            qactual = double(array);
        end
        
        function set.QActual(obj, qactual)
            %set.QActual Set the value for property QActual
            if ~isvector(qactual) && isempty(qactual)
                % Allow empty [] input
                qactual = double.empty(0,1);
            end
            
            validateattributes(qactual, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'QActual');
            
            javaArray = obj.JavaMessage.getQActual;
            array = obj.writeJavaArray(qactual, javaArray, 'double');
            obj.JavaMessage.setQActual(array);
        end
        
        function qdactual = get.QdActual(obj)
            %get.QdActual Get the value for property QdActual
            javaArray = obj.JavaMessage.getQdActual;
            array = obj.readJavaArray(javaArray, 'double');
            qdactual = double(array);
        end
        
        function set.QdActual(obj, qdactual)
            %set.QdActual Set the value for property QdActual
            if ~isvector(qdactual) && isempty(qdactual)
                % Allow empty [] input
                qdactual = double.empty(0,1);
            end
            
            validateattributes(qdactual, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'QdActual');
            
            javaArray = obj.JavaMessage.getQdActual;
            array = obj.writeJavaArray(qdactual, javaArray, 'double');
            obj.JavaMessage.setQdActual(array);
        end
        
        function iactual = get.IActual(obj)
            %get.IActual Get the value for property IActual
            javaArray = obj.JavaMessage.getIActual;
            array = obj.readJavaArray(javaArray, 'double');
            iactual = double(array);
        end
        
        function set.IActual(obj, iactual)
            %set.IActual Set the value for property IActual
            if ~isvector(iactual) && isempty(iactual)
                % Allow empty [] input
                iactual = double.empty(0,1);
            end
            
            validateattributes(iactual, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'IActual');
            
            javaArray = obj.JavaMessage.getIActual;
            array = obj.writeJavaArray(iactual, javaArray, 'double');
            obj.JavaMessage.setIActual(array);
        end
        
        function toolaccvalues = get.ToolAccValues(obj)
            %get.ToolAccValues Get the value for property ToolAccValues
            javaArray = obj.JavaMessage.getToolAccValues;
            array = obj.readJavaArray(javaArray, 'double');
            toolaccvalues = double(array);
        end
        
        function set.ToolAccValues(obj, toolaccvalues)
            %set.ToolAccValues Set the value for property ToolAccValues
            if ~isvector(toolaccvalues) && isempty(toolaccvalues)
                % Allow empty [] input
                toolaccvalues = double.empty(0,1);
            end
            
            validateattributes(toolaccvalues, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'ToolAccValues');
            
            javaArray = obj.JavaMessage.getToolAccValues;
            array = obj.writeJavaArray(toolaccvalues, javaArray, 'double');
            obj.JavaMessage.setToolAccValues(array);
        end
        
        function tcpforce = get.TcpForce(obj)
            %get.TcpForce Get the value for property TcpForce
            javaArray = obj.JavaMessage.getTcpForce;
            array = obj.readJavaArray(javaArray, 'double');
            tcpforce = double(array);
        end
        
        function set.TcpForce(obj, tcpforce)
            %set.TcpForce Set the value for property TcpForce
            if ~isvector(tcpforce) && isempty(tcpforce)
                % Allow empty [] input
                tcpforce = double.empty(0,1);
            end
            
            validateattributes(tcpforce, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'TcpForce');
            
            javaArray = obj.JavaMessage.getTcpForce;
            array = obj.writeJavaArray(tcpforce, javaArray, 'double');
            obj.JavaMessage.setTcpForce(array);
        end
        
        function toolvector = get.ToolVector(obj)
            %get.ToolVector Get the value for property ToolVector
            javaArray = obj.JavaMessage.getToolVector;
            array = obj.readJavaArray(javaArray, 'double');
            toolvector = double(array);
        end
        
        function set.ToolVector(obj, toolvector)
            %set.ToolVector Set the value for property ToolVector
            if ~isvector(toolvector) && isempty(toolvector)
                % Allow empty [] input
                toolvector = double.empty(0,1);
            end
            
            validateattributes(toolvector, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'ToolVector');
            
            javaArray = obj.JavaMessage.getToolVector;
            array = obj.writeJavaArray(toolvector, javaArray, 'double');
            obj.JavaMessage.setToolVector(array);
        end
        
        function tcpspeed = get.TcpSpeed(obj)
            %get.TcpSpeed Get the value for property TcpSpeed
            javaArray = obj.JavaMessage.getTcpSpeed;
            array = obj.readJavaArray(javaArray, 'double');
            tcpspeed = double(array);
        end
        
        function set.TcpSpeed(obj, tcpspeed)
            %set.TcpSpeed Set the value for property TcpSpeed
            if ~isvector(tcpspeed) && isempty(tcpspeed)
                % Allow empty [] input
                tcpspeed = double.empty(0,1);
            end
            
            validateattributes(tcpspeed, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'TcpSpeed');
            
            javaArray = obj.JavaMessage.getTcpSpeed;
            array = obj.writeJavaArray(tcpspeed, javaArray, 'double');
            obj.JavaMessage.setTcpSpeed(array);
        end
        
        function motortemperatures = get.MotorTemperatures(obj)
            %get.MotorTemperatures Get the value for property MotorTemperatures
            javaArray = obj.JavaMessage.getMotorTemperatures;
            array = obj.readJavaArray(javaArray, 'double');
            motortemperatures = double(array);
        end
        
        function set.MotorTemperatures(obj, motortemperatures)
            %set.MotorTemperatures Set the value for property MotorTemperatures
            if ~isvector(motortemperatures) && isempty(motortemperatures)
                % Allow empty [] input
                motortemperatures = double.empty(0,1);
            end
            
            validateattributes(motortemperatures, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'MotorTemperatures');
            
            javaArray = obj.JavaMessage.getMotorTemperatures;
            array = obj.writeJavaArray(motortemperatures, javaArray, 'double');
            obj.JavaMessage.setMotorTemperatures(array);
        end
        
        function jointmodes = get.JointModes(obj)
            %get.JointModes Get the value for property JointModes
            javaArray = obj.JavaMessage.getJointModes;
            array = obj.readJavaArray(javaArray, 'double');
            jointmodes = double(array);
        end
        
        function set.JointModes(obj, jointmodes)
            %set.JointModes Set the value for property JointModes
            if ~isvector(jointmodes) && isempty(jointmodes)
                % Allow empty [] input
                jointmodes = double.empty(0,1);
            end
            
            validateattributes(jointmodes, {'numeric'}, {'vector'}, 'RobotStateRTMsg', 'JointModes');
            
            javaArray = obj.JavaMessage.getJointModes;
            array = obj.writeJavaArray(jointmodes, javaArray, 'double');
            obj.JavaMessage.setJointModes(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Time = obj.Time;
            cpObj.DigitalInputBits = obj.DigitalInputBits;
            cpObj.ControllerTimer = obj.ControllerTimer;
            cpObj.TestValue = obj.TestValue;
            cpObj.RobotMode = obj.RobotMode;
            cpObj.QTarget = obj.QTarget;
            cpObj.QdTarget = obj.QdTarget;
            cpObj.QddTarget = obj.QddTarget;
            cpObj.ITarget = obj.ITarget;
            cpObj.MTarget = obj.MTarget;
            cpObj.QActual = obj.QActual;
            cpObj.QdActual = obj.QdActual;
            cpObj.IActual = obj.IActual;
            cpObj.ToolAccValues = obj.ToolAccValues;
            cpObj.TcpForce = obj.TcpForce;
            cpObj.ToolVector = obj.ToolVector;
            cpObj.TcpSpeed = obj.TcpSpeed;
            cpObj.MotorTemperatures = obj.MotorTemperatures;
            cpObj.JointModes = obj.JointModes;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Time = strObj.Time;
            obj.DigitalInputBits = strObj.DigitalInputBits;
            obj.ControllerTimer = strObj.ControllerTimer;
            obj.TestValue = strObj.TestValue;
            obj.RobotMode = strObj.RobotMode;
            obj.QTarget = strObj.QTarget;
            obj.QdTarget = strObj.QdTarget;
            obj.QddTarget = strObj.QddTarget;
            obj.ITarget = strObj.ITarget;
            obj.MTarget = strObj.MTarget;
            obj.QActual = strObj.QActual;
            obj.QdActual = strObj.QdActual;
            obj.IActual = strObj.IActual;
            obj.ToolAccValues = strObj.ToolAccValues;
            obj.TcpForce = strObj.TcpForce;
            obj.ToolVector = strObj.ToolVector;
            obj.TcpSpeed = strObj.TcpSpeed;
            obj.MotorTemperatures = strObj.MotorTemperatures;
            obj.JointModes = strObj.JointModes;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Time = obj.Time;
            strObj.DigitalInputBits = obj.DigitalInputBits;
            strObj.ControllerTimer = obj.ControllerTimer;
            strObj.TestValue = obj.TestValue;
            strObj.RobotMode = obj.RobotMode;
            strObj.QTarget = obj.QTarget;
            strObj.QdTarget = obj.QdTarget;
            strObj.QddTarget = obj.QddTarget;
            strObj.ITarget = obj.ITarget;
            strObj.MTarget = obj.MTarget;
            strObj.QActual = obj.QActual;
            strObj.QdActual = obj.QdActual;
            strObj.IActual = obj.IActual;
            strObj.ToolAccValues = obj.ToolAccValues;
            strObj.TcpForce = obj.TcpForce;
            strObj.ToolVector = obj.ToolVector;
            strObj.TcpSpeed = obj.TcpSpeed;
            strObj.MotorTemperatures = obj.MotorTemperatures;
            strObj.JointModes = obj.JointModes;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.ur_msgs.RobotStateRTMsg.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.ur_msgs.RobotStateRTMsg;
            obj.reload(strObj);
        end
    end
end
