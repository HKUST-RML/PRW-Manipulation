classdef CostSource < robotics.ros.Message
    %CostSource MATLAB implementation of moveit_msgs/CostSource
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/CostSource' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'abb7e013237dacaaa8b97e704102f908' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
    end
    
    properties (Dependent)
        CostDensity
        AabbMin
        AabbMax
    end
    
    properties (Access = protected)
        Cache = struct('AabbMin', [], 'AabbMax', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AabbMax', 'AabbMin', 'CostDensity'} % List of non-constant message properties
        ROSPropertyList = {'aabb_max', 'aabb_min', 'cost_density'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = CostSource(msg)
            %CostSource Construct the message object CostSource
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function costdensity = get.CostDensity(obj)
            %get.CostDensity Get the value for property CostDensity
            costdensity = double(obj.JavaMessage.getCostDensity);
        end
        
        function set.CostDensity(obj, costdensity)
            %set.CostDensity Set the value for property CostDensity
            validateattributes(costdensity, {'numeric'}, {'nonempty', 'scalar'}, 'CostSource', 'CostDensity');
            
            obj.JavaMessage.setCostDensity(costdensity);
        end
        
        function aabbmin = get.AabbMin(obj)
            %get.AabbMin Get the value for property AabbMin
            if isempty(obj.Cache.AabbMin)
                obj.Cache.AabbMin = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getAabbMin);
            end
            aabbmin = obj.Cache.AabbMin;
        end
        
        function set.AabbMin(obj, aabbmin)
            %set.AabbMin Set the value for property AabbMin
            validateattributes(aabbmin, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'CostSource', 'AabbMin');
            
            obj.JavaMessage.setAabbMin(aabbmin.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.AabbMin)
                obj.Cache.AabbMin.setJavaObject(aabbmin.getJavaObject);
            end
        end
        
        function aabbmax = get.AabbMax(obj)
            %get.AabbMax Get the value for property AabbMax
            if isempty(obj.Cache.AabbMax)
                obj.Cache.AabbMax = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getAabbMax);
            end
            aabbmax = obj.Cache.AabbMax;
        end
        
        function set.AabbMax(obj, aabbmax)
            %set.AabbMax Set the value for property AabbMax
            validateattributes(aabbmax, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'CostSource', 'AabbMax');
            
            obj.JavaMessage.setAabbMax(aabbmax.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.AabbMax)
                obj.Cache.AabbMax.setJavaObject(aabbmax.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.AabbMin = [];
            obj.Cache.AabbMax = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.CostDensity = obj.CostDensity;
            
            % Recursively copy compound properties
            cpObj.AabbMin = copy(obj.AabbMin);
            cpObj.AabbMax = copy(obj.AabbMax);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.CostDensity = strObj.CostDensity;
            obj.AabbMin = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.AabbMin);
            obj.AabbMax = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.AabbMax);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.CostDensity = obj.CostDensity;
            strObj.AabbMin = saveobj(obj.AabbMin);
            strObj.AabbMax = saveobj(obj.AabbMax);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.CostSource.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.CostSource;
            obj.reload(strObj);
        end
    end
end
