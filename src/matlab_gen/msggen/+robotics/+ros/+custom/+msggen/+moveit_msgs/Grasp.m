classdef Grasp < robotics.ros.Message
    %Grasp MATLAB implementation of moveit_msgs/Grasp
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/Grasp' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e26c8fb64f589c33c5d5e54bd7b5e4cb' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseStampedClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/PoseStamped') % Dispatch to MATLAB class for message type geometry_msgs/PoseStamped
        MoveitMsgsGripperTranslationClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/GripperTranslation') % Dispatch to MATLAB class for message type moveit_msgs/GripperTranslation
        TrajectoryMsgsJointTrajectoryClass = robotics.ros.msg.internal.MessageFactory.getClassForType('trajectory_msgs/JointTrajectory') % Dispatch to MATLAB class for message type trajectory_msgs/JointTrajectory
    end
    
    properties (Dependent)
        Id
        PreGraspPosture
        GraspPosture
        GraspPose
        GraspQuality
        PreGraspApproach
        PostGraspRetreat
        PostPlaceRetreat
        MaxContactForce
        AllowedTouchObjects
    end
    
    properties (Access = protected)
        Cache = struct('PreGraspPosture', [], 'GraspPosture', [], 'GraspPose', [], 'PreGraspApproach', [], 'PostGraspRetreat', [], 'PostPlaceRetreat', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AllowedTouchObjects', 'GraspPose', 'GraspPosture', 'GraspQuality', 'Id', 'MaxContactForce', 'PostGraspRetreat', 'PostPlaceRetreat', 'PreGraspApproach', 'PreGraspPosture'} % List of non-constant message properties
        ROSPropertyList = {'allowed_touch_objects', 'grasp_pose', 'grasp_posture', 'grasp_quality', 'id', 'max_contact_force', 'post_grasp_retreat', 'post_place_retreat', 'pre_grasp_approach', 'pre_grasp_posture'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Grasp(msg)
            %Grasp Construct the message object Grasp
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = char(obj.JavaMessage.getId);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'char'}, {}, 'Grasp', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function pregraspposture = get.PreGraspPosture(obj)
            %get.PreGraspPosture Get the value for property PreGraspPosture
            if isempty(obj.Cache.PreGraspPosture)
                obj.Cache.PreGraspPosture = feval(obj.TrajectoryMsgsJointTrajectoryClass, obj.JavaMessage.getPreGraspPosture);
            end
            pregraspposture = obj.Cache.PreGraspPosture;
        end
        
        function set.PreGraspPosture(obj, pregraspposture)
            %set.PreGraspPosture Set the value for property PreGraspPosture
            validateattributes(pregraspposture, {obj.TrajectoryMsgsJointTrajectoryClass}, {'nonempty', 'scalar'}, 'Grasp', 'PreGraspPosture');
            
            obj.JavaMessage.setPreGraspPosture(pregraspposture.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PreGraspPosture)
                obj.Cache.PreGraspPosture.setJavaObject(pregraspposture.getJavaObject);
            end
        end
        
        function graspposture = get.GraspPosture(obj)
            %get.GraspPosture Get the value for property GraspPosture
            if isempty(obj.Cache.GraspPosture)
                obj.Cache.GraspPosture = feval(obj.TrajectoryMsgsJointTrajectoryClass, obj.JavaMessage.getGraspPosture);
            end
            graspposture = obj.Cache.GraspPosture;
        end
        
        function set.GraspPosture(obj, graspposture)
            %set.GraspPosture Set the value for property GraspPosture
            validateattributes(graspposture, {obj.TrajectoryMsgsJointTrajectoryClass}, {'nonempty', 'scalar'}, 'Grasp', 'GraspPosture');
            
            obj.JavaMessage.setGraspPosture(graspposture.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GraspPosture)
                obj.Cache.GraspPosture.setJavaObject(graspposture.getJavaObject);
            end
        end
        
        function grasppose = get.GraspPose(obj)
            %get.GraspPose Get the value for property GraspPose
            if isempty(obj.Cache.GraspPose)
                obj.Cache.GraspPose = feval(obj.GeometryMsgsPoseStampedClass, obj.JavaMessage.getGraspPose);
            end
            grasppose = obj.Cache.GraspPose;
        end
        
        function set.GraspPose(obj, grasppose)
            %set.GraspPose Set the value for property GraspPose
            validateattributes(grasppose, {obj.GeometryMsgsPoseStampedClass}, {'nonempty', 'scalar'}, 'Grasp', 'GraspPose');
            
            obj.JavaMessage.setGraspPose(grasppose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GraspPose)
                obj.Cache.GraspPose.setJavaObject(grasppose.getJavaObject);
            end
        end
        
        function graspquality = get.GraspQuality(obj)
            %get.GraspQuality Get the value for property GraspQuality
            graspquality = double(obj.JavaMessage.getGraspQuality);
        end
        
        function set.GraspQuality(obj, graspquality)
            %set.GraspQuality Set the value for property GraspQuality
            validateattributes(graspquality, {'numeric'}, {'nonempty', 'scalar'}, 'Grasp', 'GraspQuality');
            
            obj.JavaMessage.setGraspQuality(graspquality);
        end
        
        function pregraspapproach = get.PreGraspApproach(obj)
            %get.PreGraspApproach Get the value for property PreGraspApproach
            if isempty(obj.Cache.PreGraspApproach)
                obj.Cache.PreGraspApproach = feval(obj.MoveitMsgsGripperTranslationClass, obj.JavaMessage.getPreGraspApproach);
            end
            pregraspapproach = obj.Cache.PreGraspApproach;
        end
        
        function set.PreGraspApproach(obj, pregraspapproach)
            %set.PreGraspApproach Set the value for property PreGraspApproach
            validateattributes(pregraspapproach, {obj.MoveitMsgsGripperTranslationClass}, {'nonempty', 'scalar'}, 'Grasp', 'PreGraspApproach');
            
            obj.JavaMessage.setPreGraspApproach(pregraspapproach.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PreGraspApproach)
                obj.Cache.PreGraspApproach.setJavaObject(pregraspapproach.getJavaObject);
            end
        end
        
        function postgraspretreat = get.PostGraspRetreat(obj)
            %get.PostGraspRetreat Get the value for property PostGraspRetreat
            if isempty(obj.Cache.PostGraspRetreat)
                obj.Cache.PostGraspRetreat = feval(obj.MoveitMsgsGripperTranslationClass, obj.JavaMessage.getPostGraspRetreat);
            end
            postgraspretreat = obj.Cache.PostGraspRetreat;
        end
        
        function set.PostGraspRetreat(obj, postgraspretreat)
            %set.PostGraspRetreat Set the value for property PostGraspRetreat
            validateattributes(postgraspretreat, {obj.MoveitMsgsGripperTranslationClass}, {'nonempty', 'scalar'}, 'Grasp', 'PostGraspRetreat');
            
            obj.JavaMessage.setPostGraspRetreat(postgraspretreat.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PostGraspRetreat)
                obj.Cache.PostGraspRetreat.setJavaObject(postgraspretreat.getJavaObject);
            end
        end
        
        function postplaceretreat = get.PostPlaceRetreat(obj)
            %get.PostPlaceRetreat Get the value for property PostPlaceRetreat
            if isempty(obj.Cache.PostPlaceRetreat)
                obj.Cache.PostPlaceRetreat = feval(obj.MoveitMsgsGripperTranslationClass, obj.JavaMessage.getPostPlaceRetreat);
            end
            postplaceretreat = obj.Cache.PostPlaceRetreat;
        end
        
        function set.PostPlaceRetreat(obj, postplaceretreat)
            %set.PostPlaceRetreat Set the value for property PostPlaceRetreat
            validateattributes(postplaceretreat, {obj.MoveitMsgsGripperTranslationClass}, {'nonempty', 'scalar'}, 'Grasp', 'PostPlaceRetreat');
            
            obj.JavaMessage.setPostPlaceRetreat(postplaceretreat.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PostPlaceRetreat)
                obj.Cache.PostPlaceRetreat.setJavaObject(postplaceretreat.getJavaObject);
            end
        end
        
        function maxcontactforce = get.MaxContactForce(obj)
            %get.MaxContactForce Get the value for property MaxContactForce
            maxcontactforce = single(obj.JavaMessage.getMaxContactForce);
        end
        
        function set.MaxContactForce(obj, maxcontactforce)
            %set.MaxContactForce Set the value for property MaxContactForce
            validateattributes(maxcontactforce, {'numeric'}, {'nonempty', 'scalar'}, 'Grasp', 'MaxContactForce');
            
            obj.JavaMessage.setMaxContactForce(maxcontactforce);
        end
        
        function allowedtouchobjects = get.AllowedTouchObjects(obj)
            %get.AllowedTouchObjects Get the value for property AllowedTouchObjects
            javaArray = obj.JavaMessage.getAllowedTouchObjects;
            array = obj.readJavaArray(javaArray, 'char');
            allowedtouchobjects = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.AllowedTouchObjects(obj, allowedtouchobjects)
            %set.AllowedTouchObjects Set the value for property AllowedTouchObjects
            if ~isvector(allowedtouchobjects) && isempty(allowedtouchobjects)
                % Allow empty [] input
                allowedtouchobjects = cell.empty(0,1);
            end
            
            validateattributes(allowedtouchobjects, {'cell'}, {'vector'}, 'Grasp', 'AllowedTouchObjects');
            if any(cellfun(@(x) ~ischar(x), allowedtouchobjects))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'allowedtouchobjects'));
            end
            
            javaArray = obj.JavaMessage.getAllowedTouchObjects;
            array = obj.writeJavaArray(allowedtouchobjects, javaArray, 'char');
            obj.JavaMessage.setAllowedTouchObjects(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.PreGraspPosture = [];
            obj.Cache.GraspPosture = [];
            obj.Cache.GraspPose = [];
            obj.Cache.PreGraspApproach = [];
            obj.Cache.PostGraspRetreat = [];
            obj.Cache.PostPlaceRetreat = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.GraspQuality = obj.GraspQuality;
            cpObj.MaxContactForce = obj.MaxContactForce;
            cpObj.AllowedTouchObjects = obj.AllowedTouchObjects;
            
            % Recursively copy compound properties
            cpObj.PreGraspPosture = copy(obj.PreGraspPosture);
            cpObj.GraspPosture = copy(obj.GraspPosture);
            cpObj.GraspPose = copy(obj.GraspPose);
            cpObj.PreGraspApproach = copy(obj.PreGraspApproach);
            cpObj.PostGraspRetreat = copy(obj.PostGraspRetreat);
            cpObj.PostPlaceRetreat = copy(obj.PostPlaceRetreat);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.GraspQuality = strObj.GraspQuality;
            obj.MaxContactForce = strObj.MaxContactForce;
            obj.AllowedTouchObjects = strObj.AllowedTouchObjects;
            obj.PreGraspPosture = feval([obj.TrajectoryMsgsJointTrajectoryClass '.loadobj'], strObj.PreGraspPosture);
            obj.GraspPosture = feval([obj.TrajectoryMsgsJointTrajectoryClass '.loadobj'], strObj.GraspPosture);
            obj.GraspPose = feval([obj.GeometryMsgsPoseStampedClass '.loadobj'], strObj.GraspPose);
            obj.PreGraspApproach = feval([obj.MoveitMsgsGripperTranslationClass '.loadobj'], strObj.PreGraspApproach);
            obj.PostGraspRetreat = feval([obj.MoveitMsgsGripperTranslationClass '.loadobj'], strObj.PostGraspRetreat);
            obj.PostPlaceRetreat = feval([obj.MoveitMsgsGripperTranslationClass '.loadobj'], strObj.PostPlaceRetreat);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.GraspQuality = obj.GraspQuality;
            strObj.MaxContactForce = obj.MaxContactForce;
            strObj.AllowedTouchObjects = obj.AllowedTouchObjects;
            strObj.PreGraspPosture = saveobj(obj.PreGraspPosture);
            strObj.GraspPosture = saveobj(obj.GraspPosture);
            strObj.GraspPose = saveobj(obj.GraspPose);
            strObj.PreGraspApproach = saveobj(obj.PreGraspApproach);
            strObj.PostGraspRetreat = saveobj(obj.PostGraspRetreat);
            strObj.PostPlaceRetreat = saveobj(obj.PostPlaceRetreat);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.Grasp.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.Grasp;
            obj.reload(strObj);
        end
    end
end
