classdef PlanningOptions < robotics.ros.Message
    %PlanningOptions MATLAB implementation of moveit_msgs/PlanningOptions
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/PlanningOptions' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '3934e50ede2ecea03e532aade900ab50' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsPlanningSceneClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/PlanningScene') % Dispatch to MATLAB class for message type moveit_msgs/PlanningScene
    end
    
    properties (Dependent)
        PlanningSceneDiff
        PlanOnly
        LookAround
        LookAroundAttempts
        MaxSafeExecutionCost
        Replan
        ReplanAttempts
        ReplanDelay
    end
    
    properties (Access = protected)
        Cache = struct('PlanningSceneDiff', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'LookAround', 'LookAroundAttempts', 'MaxSafeExecutionCost', 'PlanOnly', 'PlanningSceneDiff', 'Replan', 'ReplanAttempts', 'ReplanDelay'} % List of non-constant message properties
        ROSPropertyList = {'look_around', 'look_around_attempts', 'max_safe_execution_cost', 'plan_only', 'planning_scene_diff', 'replan', 'replan_attempts', 'replan_delay'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = PlanningOptions(msg)
            %PlanningOptions Construct the message object PlanningOptions
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function planningscenediff = get.PlanningSceneDiff(obj)
            %get.PlanningSceneDiff Get the value for property PlanningSceneDiff
            if isempty(obj.Cache.PlanningSceneDiff)
                obj.Cache.PlanningSceneDiff = feval(obj.MoveitMsgsPlanningSceneClass, obj.JavaMessage.getPlanningSceneDiff);
            end
            planningscenediff = obj.Cache.PlanningSceneDiff;
        end
        
        function set.PlanningSceneDiff(obj, planningscenediff)
            %set.PlanningSceneDiff Set the value for property PlanningSceneDiff
            validateattributes(planningscenediff, {obj.MoveitMsgsPlanningSceneClass}, {'nonempty', 'scalar'}, 'PlanningOptions', 'PlanningSceneDiff');
            
            obj.JavaMessage.setPlanningSceneDiff(planningscenediff.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PlanningSceneDiff)
                obj.Cache.PlanningSceneDiff.setJavaObject(planningscenediff.getJavaObject);
            end
        end
        
        function planonly = get.PlanOnly(obj)
            %get.PlanOnly Get the value for property PlanOnly
            planonly = logical(obj.JavaMessage.getPlanOnly);
        end
        
        function set.PlanOnly(obj, planonly)
            %set.PlanOnly Set the value for property PlanOnly
            validateattributes(planonly, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'PlanningOptions', 'PlanOnly');
            
            obj.JavaMessage.setPlanOnly(planonly);
        end
        
        function lookaround = get.LookAround(obj)
            %get.LookAround Get the value for property LookAround
            lookaround = logical(obj.JavaMessage.getLookAround);
        end
        
        function set.LookAround(obj, lookaround)
            %set.LookAround Set the value for property LookAround
            validateattributes(lookaround, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'PlanningOptions', 'LookAround');
            
            obj.JavaMessage.setLookAround(lookaround);
        end
        
        function lookaroundattempts = get.LookAroundAttempts(obj)
            %get.LookAroundAttempts Get the value for property LookAroundAttempts
            lookaroundattempts = int32(obj.JavaMessage.getLookAroundAttempts);
        end
        
        function set.LookAroundAttempts(obj, lookaroundattempts)
            %set.LookAroundAttempts Set the value for property LookAroundAttempts
            validateattributes(lookaroundattempts, {'numeric'}, {'nonempty', 'scalar'}, 'PlanningOptions', 'LookAroundAttempts');
            
            obj.JavaMessage.setLookAroundAttempts(lookaroundattempts);
        end
        
        function maxsafeexecutioncost = get.MaxSafeExecutionCost(obj)
            %get.MaxSafeExecutionCost Get the value for property MaxSafeExecutionCost
            maxsafeexecutioncost = double(obj.JavaMessage.getMaxSafeExecutionCost);
        end
        
        function set.MaxSafeExecutionCost(obj, maxsafeexecutioncost)
            %set.MaxSafeExecutionCost Set the value for property MaxSafeExecutionCost
            validateattributes(maxsafeexecutioncost, {'numeric'}, {'nonempty', 'scalar'}, 'PlanningOptions', 'MaxSafeExecutionCost');
            
            obj.JavaMessage.setMaxSafeExecutionCost(maxsafeexecutioncost);
        end
        
        function replan = get.Replan(obj)
            %get.Replan Get the value for property Replan
            replan = logical(obj.JavaMessage.getReplan);
        end
        
        function set.Replan(obj, replan)
            %set.Replan Set the value for property Replan
            validateattributes(replan, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'PlanningOptions', 'Replan');
            
            obj.JavaMessage.setReplan(replan);
        end
        
        function replanattempts = get.ReplanAttempts(obj)
            %get.ReplanAttempts Get the value for property ReplanAttempts
            replanattempts = int32(obj.JavaMessage.getReplanAttempts);
        end
        
        function set.ReplanAttempts(obj, replanattempts)
            %set.ReplanAttempts Set the value for property ReplanAttempts
            validateattributes(replanattempts, {'numeric'}, {'nonempty', 'scalar'}, 'PlanningOptions', 'ReplanAttempts');
            
            obj.JavaMessage.setReplanAttempts(replanattempts);
        end
        
        function replandelay = get.ReplanDelay(obj)
            %get.ReplanDelay Get the value for property ReplanDelay
            replandelay = double(obj.JavaMessage.getReplanDelay);
        end
        
        function set.ReplanDelay(obj, replandelay)
            %set.ReplanDelay Set the value for property ReplanDelay
            validateattributes(replandelay, {'numeric'}, {'nonempty', 'scalar'}, 'PlanningOptions', 'ReplanDelay');
            
            obj.JavaMessage.setReplanDelay(replandelay);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.PlanningSceneDiff = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.PlanOnly = obj.PlanOnly;
            cpObj.LookAround = obj.LookAround;
            cpObj.LookAroundAttempts = obj.LookAroundAttempts;
            cpObj.MaxSafeExecutionCost = obj.MaxSafeExecutionCost;
            cpObj.Replan = obj.Replan;
            cpObj.ReplanAttempts = obj.ReplanAttempts;
            cpObj.ReplanDelay = obj.ReplanDelay;
            
            % Recursively copy compound properties
            cpObj.PlanningSceneDiff = copy(obj.PlanningSceneDiff);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.PlanOnly = strObj.PlanOnly;
            obj.LookAround = strObj.LookAround;
            obj.LookAroundAttempts = strObj.LookAroundAttempts;
            obj.MaxSafeExecutionCost = strObj.MaxSafeExecutionCost;
            obj.Replan = strObj.Replan;
            obj.ReplanAttempts = strObj.ReplanAttempts;
            obj.ReplanDelay = strObj.ReplanDelay;
            obj.PlanningSceneDiff = feval([obj.MoveitMsgsPlanningSceneClass '.loadobj'], strObj.PlanningSceneDiff);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.PlanOnly = obj.PlanOnly;
            strObj.LookAround = obj.LookAround;
            strObj.LookAroundAttempts = obj.LookAroundAttempts;
            strObj.MaxSafeExecutionCost = obj.MaxSafeExecutionCost;
            strObj.Replan = obj.Replan;
            strObj.ReplanAttempts = obj.ReplanAttempts;
            strObj.ReplanDelay = obj.ReplanDelay;
            strObj.PlanningSceneDiff = saveobj(obj.PlanningSceneDiff);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.PlanningOptions.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.PlanningOptions;
            obj.reload(strObj);
        end
    end
end
