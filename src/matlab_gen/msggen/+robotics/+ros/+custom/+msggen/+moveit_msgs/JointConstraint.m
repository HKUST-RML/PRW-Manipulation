classdef JointConstraint < robotics.ros.Message
    %JointConstraint MATLAB implementation of moveit_msgs/JointConstraint
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/JointConstraint' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c02a15146bec0ce13564807805b008f0' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        JointName
        Position
        ToleranceAbove
        ToleranceBelow
        Weight
    end
    
    properties (Constant, Hidden)
        PropertyList = {'JointName', 'Position', 'ToleranceAbove', 'ToleranceBelow', 'Weight'} % List of non-constant message properties
        ROSPropertyList = {'joint_name', 'position', 'tolerance_above', 'tolerance_below', 'weight'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = JointConstraint(msg)
            %JointConstraint Construct the message object JointConstraint
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function jointname = get.JointName(obj)
            %get.JointName Get the value for property JointName
            jointname = char(obj.JavaMessage.getJointName);
        end
        
        function set.JointName(obj, jointname)
            %set.JointName Set the value for property JointName
            validateattributes(jointname, {'char'}, {}, 'JointConstraint', 'JointName');
            
            obj.JavaMessage.setJointName(jointname);
        end
        
        function position = get.Position(obj)
            %get.Position Get the value for property Position
            position = double(obj.JavaMessage.getPosition);
        end
        
        function set.Position(obj, position)
            %set.Position Set the value for property Position
            validateattributes(position, {'numeric'}, {'nonempty', 'scalar'}, 'JointConstraint', 'Position');
            
            obj.JavaMessage.setPosition(position);
        end
        
        function toleranceabove = get.ToleranceAbove(obj)
            %get.ToleranceAbove Get the value for property ToleranceAbove
            toleranceabove = double(obj.JavaMessage.getToleranceAbove);
        end
        
        function set.ToleranceAbove(obj, toleranceabove)
            %set.ToleranceAbove Set the value for property ToleranceAbove
            validateattributes(toleranceabove, {'numeric'}, {'nonempty', 'scalar'}, 'JointConstraint', 'ToleranceAbove');
            
            obj.JavaMessage.setToleranceAbove(toleranceabove);
        end
        
        function tolerancebelow = get.ToleranceBelow(obj)
            %get.ToleranceBelow Get the value for property ToleranceBelow
            tolerancebelow = double(obj.JavaMessage.getToleranceBelow);
        end
        
        function set.ToleranceBelow(obj, tolerancebelow)
            %set.ToleranceBelow Set the value for property ToleranceBelow
            validateattributes(tolerancebelow, {'numeric'}, {'nonempty', 'scalar'}, 'JointConstraint', 'ToleranceBelow');
            
            obj.JavaMessage.setToleranceBelow(tolerancebelow);
        end
        
        function weight = get.Weight(obj)
            %get.Weight Get the value for property Weight
            weight = double(obj.JavaMessage.getWeight);
        end
        
        function set.Weight(obj, weight)
            %set.Weight Set the value for property Weight
            validateattributes(weight, {'numeric'}, {'nonempty', 'scalar'}, 'JointConstraint', 'Weight');
            
            obj.JavaMessage.setWeight(weight);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.JointName = obj.JointName;
            cpObj.Position = obj.Position;
            cpObj.ToleranceAbove = obj.ToleranceAbove;
            cpObj.ToleranceBelow = obj.ToleranceBelow;
            cpObj.Weight = obj.Weight;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.JointName = strObj.JointName;
            obj.Position = strObj.Position;
            obj.ToleranceAbove = strObj.ToleranceAbove;
            obj.ToleranceBelow = strObj.ToleranceBelow;
            obj.Weight = strObj.Weight;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.JointName = obj.JointName;
            strObj.Position = obj.Position;
            strObj.ToleranceAbove = obj.ToleranceAbove;
            strObj.ToleranceBelow = obj.ToleranceBelow;
            strObj.Weight = obj.Weight;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.JointConstraint.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.JointConstraint;
            obj.reload(strObj);
        end
    end
end
