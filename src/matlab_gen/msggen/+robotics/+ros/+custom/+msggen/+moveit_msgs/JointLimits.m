classdef JointLimits < robotics.ros.Message
    %JointLimits MATLAB implementation of moveit_msgs/JointLimits
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/JointLimits' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '8ca618c7329ea46142cbc864a2efe856' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        JointName
        HasPositionLimits
        MinPosition
        MaxPosition
        HasVelocityLimits
        MaxVelocity
        HasAccelerationLimits
        MaxAcceleration
    end
    
    properties (Constant, Hidden)
        PropertyList = {'HasAccelerationLimits', 'HasPositionLimits', 'HasVelocityLimits', 'JointName', 'MaxAcceleration', 'MaxPosition', 'MaxVelocity', 'MinPosition'} % List of non-constant message properties
        ROSPropertyList = {'has_acceleration_limits', 'has_position_limits', 'has_velocity_limits', 'joint_name', 'max_acceleration', 'max_position', 'max_velocity', 'min_position'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = JointLimits(msg)
            %JointLimits Construct the message object JointLimits
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function jointname = get.JointName(obj)
            %get.JointName Get the value for property JointName
            jointname = char(obj.JavaMessage.getJointName);
        end
        
        function set.JointName(obj, jointname)
            %set.JointName Set the value for property JointName
            validateattributes(jointname, {'char'}, {}, 'JointLimits', 'JointName');
            
            obj.JavaMessage.setJointName(jointname);
        end
        
        function haspositionlimits = get.HasPositionLimits(obj)
            %get.HasPositionLimits Get the value for property HasPositionLimits
            haspositionlimits = logical(obj.JavaMessage.getHasPositionLimits);
        end
        
        function set.HasPositionLimits(obj, haspositionlimits)
            %set.HasPositionLimits Set the value for property HasPositionLimits
            validateattributes(haspositionlimits, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'JointLimits', 'HasPositionLimits');
            
            obj.JavaMessage.setHasPositionLimits(haspositionlimits);
        end
        
        function minposition = get.MinPosition(obj)
            %get.MinPosition Get the value for property MinPosition
            minposition = double(obj.JavaMessage.getMinPosition);
        end
        
        function set.MinPosition(obj, minposition)
            %set.MinPosition Set the value for property MinPosition
            validateattributes(minposition, {'numeric'}, {'nonempty', 'scalar'}, 'JointLimits', 'MinPosition');
            
            obj.JavaMessage.setMinPosition(minposition);
        end
        
        function maxposition = get.MaxPosition(obj)
            %get.MaxPosition Get the value for property MaxPosition
            maxposition = double(obj.JavaMessage.getMaxPosition);
        end
        
        function set.MaxPosition(obj, maxposition)
            %set.MaxPosition Set the value for property MaxPosition
            validateattributes(maxposition, {'numeric'}, {'nonempty', 'scalar'}, 'JointLimits', 'MaxPosition');
            
            obj.JavaMessage.setMaxPosition(maxposition);
        end
        
        function hasvelocitylimits = get.HasVelocityLimits(obj)
            %get.HasVelocityLimits Get the value for property HasVelocityLimits
            hasvelocitylimits = logical(obj.JavaMessage.getHasVelocityLimits);
        end
        
        function set.HasVelocityLimits(obj, hasvelocitylimits)
            %set.HasVelocityLimits Set the value for property HasVelocityLimits
            validateattributes(hasvelocitylimits, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'JointLimits', 'HasVelocityLimits');
            
            obj.JavaMessage.setHasVelocityLimits(hasvelocitylimits);
        end
        
        function maxvelocity = get.MaxVelocity(obj)
            %get.MaxVelocity Get the value for property MaxVelocity
            maxvelocity = double(obj.JavaMessage.getMaxVelocity);
        end
        
        function set.MaxVelocity(obj, maxvelocity)
            %set.MaxVelocity Set the value for property MaxVelocity
            validateattributes(maxvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'JointLimits', 'MaxVelocity');
            
            obj.JavaMessage.setMaxVelocity(maxvelocity);
        end
        
        function hasaccelerationlimits = get.HasAccelerationLimits(obj)
            %get.HasAccelerationLimits Get the value for property HasAccelerationLimits
            hasaccelerationlimits = logical(obj.JavaMessage.getHasAccelerationLimits);
        end
        
        function set.HasAccelerationLimits(obj, hasaccelerationlimits)
            %set.HasAccelerationLimits Set the value for property HasAccelerationLimits
            validateattributes(hasaccelerationlimits, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'JointLimits', 'HasAccelerationLimits');
            
            obj.JavaMessage.setHasAccelerationLimits(hasaccelerationlimits);
        end
        
        function maxacceleration = get.MaxAcceleration(obj)
            %get.MaxAcceleration Get the value for property MaxAcceleration
            maxacceleration = double(obj.JavaMessage.getMaxAcceleration);
        end
        
        function set.MaxAcceleration(obj, maxacceleration)
            %set.MaxAcceleration Set the value for property MaxAcceleration
            validateattributes(maxacceleration, {'numeric'}, {'nonempty', 'scalar'}, 'JointLimits', 'MaxAcceleration');
            
            obj.JavaMessage.setMaxAcceleration(maxacceleration);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.JointName = obj.JointName;
            cpObj.HasPositionLimits = obj.HasPositionLimits;
            cpObj.MinPosition = obj.MinPosition;
            cpObj.MaxPosition = obj.MaxPosition;
            cpObj.HasVelocityLimits = obj.HasVelocityLimits;
            cpObj.MaxVelocity = obj.MaxVelocity;
            cpObj.HasAccelerationLimits = obj.HasAccelerationLimits;
            cpObj.MaxAcceleration = obj.MaxAcceleration;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.JointName = strObj.JointName;
            obj.HasPositionLimits = strObj.HasPositionLimits;
            obj.MinPosition = strObj.MinPosition;
            obj.MaxPosition = strObj.MaxPosition;
            obj.HasVelocityLimits = strObj.HasVelocityLimits;
            obj.MaxVelocity = strObj.MaxVelocity;
            obj.HasAccelerationLimits = strObj.HasAccelerationLimits;
            obj.MaxAcceleration = strObj.MaxAcceleration;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.JointName = obj.JointName;
            strObj.HasPositionLimits = obj.HasPositionLimits;
            strObj.MinPosition = obj.MinPosition;
            strObj.MaxPosition = obj.MaxPosition;
            strObj.HasVelocityLimits = obj.HasVelocityLimits;
            strObj.MaxVelocity = obj.MaxVelocity;
            strObj.HasAccelerationLimits = obj.HasAccelerationLimits;
            strObj.MaxAcceleration = obj.MaxAcceleration;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.JointLimits.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.JointLimits;
            obj.reload(strObj);
        end
    end
end
