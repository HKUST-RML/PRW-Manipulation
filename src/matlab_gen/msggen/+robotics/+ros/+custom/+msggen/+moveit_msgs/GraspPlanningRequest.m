classdef GraspPlanningRequest < robotics.ros.Message
    %GraspPlanningRequest MATLAB implementation of moveit_msgs/GraspPlanningRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/GraspPlanningRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c234e9a645708cc86b57a43999746ae6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsCollisionObjectClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/CollisionObject') % Dispatch to MATLAB class for message type moveit_msgs/CollisionObject
        MoveitMsgsGraspClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/Grasp') % Dispatch to MATLAB class for message type moveit_msgs/Grasp
    end
    
    properties (Dependent)
        GroupName
        Target
        SupportSurfaces
        CandidateGrasps
        MovableObstacles
    end
    
    properties (Access = protected)
        Cache = struct('Target', [], 'CandidateGrasps', [], 'MovableObstacles', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CandidateGrasps', 'GroupName', 'MovableObstacles', 'SupportSurfaces', 'Target'} % List of non-constant message properties
        ROSPropertyList = {'candidate_grasps', 'group_name', 'movable_obstacles', 'support_surfaces', 'target'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GraspPlanningRequest(msg)
            %GraspPlanningRequest Construct the message object GraspPlanningRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function groupname = get.GroupName(obj)
            %get.GroupName Get the value for property GroupName
            groupname = char(obj.JavaMessage.getGroupName);
        end
        
        function set.GroupName(obj, groupname)
            %set.GroupName Set the value for property GroupName
            validateattributes(groupname, {'char'}, {}, 'GraspPlanningRequest', 'GroupName');
            
            obj.JavaMessage.setGroupName(groupname);
        end
        
        function target = get.Target(obj)
            %get.Target Get the value for property Target
            if isempty(obj.Cache.Target)
                obj.Cache.Target = feval(obj.MoveitMsgsCollisionObjectClass, obj.JavaMessage.getTarget);
            end
            target = obj.Cache.Target;
        end
        
        function set.Target(obj, target)
            %set.Target Set the value for property Target
            validateattributes(target, {obj.MoveitMsgsCollisionObjectClass}, {'nonempty', 'scalar'}, 'GraspPlanningRequest', 'Target');
            
            obj.JavaMessage.setTarget(target.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Target)
                obj.Cache.Target.setJavaObject(target.getJavaObject);
            end
        end
        
        function supportsurfaces = get.SupportSurfaces(obj)
            %get.SupportSurfaces Get the value for property SupportSurfaces
            javaArray = obj.JavaMessage.getSupportSurfaces;
            array = obj.readJavaArray(javaArray, 'char');
            supportsurfaces = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.SupportSurfaces(obj, supportsurfaces)
            %set.SupportSurfaces Set the value for property SupportSurfaces
            if ~isvector(supportsurfaces) && isempty(supportsurfaces)
                % Allow empty [] input
                supportsurfaces = cell.empty(0,1);
            end
            
            validateattributes(supportsurfaces, {'cell'}, {'vector'}, 'GraspPlanningRequest', 'SupportSurfaces');
            if any(cellfun(@(x) ~ischar(x), supportsurfaces))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'supportsurfaces'));
            end
            
            javaArray = obj.JavaMessage.getSupportSurfaces;
            array = obj.writeJavaArray(supportsurfaces, javaArray, 'char');
            obj.JavaMessage.setSupportSurfaces(array);
        end
        
        function candidategrasps = get.CandidateGrasps(obj)
            %get.CandidateGrasps Get the value for property CandidateGrasps
            if isempty(obj.Cache.CandidateGrasps)
                javaArray = obj.JavaMessage.getCandidateGrasps;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsGraspClass);
                obj.Cache.CandidateGrasps = feval(obj.MoveitMsgsGraspClass, array);
            end
            candidategrasps = obj.Cache.CandidateGrasps;
        end
        
        function set.CandidateGrasps(obj, candidategrasps)
            %set.CandidateGrasps Set the value for property CandidateGrasps
            if ~isvector(candidategrasps) && isempty(candidategrasps)
                % Allow empty [] input
                candidategrasps = feval([obj.MoveitMsgsGraspClass '.empty'], 0, 1);
            end
            
            validateattributes(candidategrasps, {obj.MoveitMsgsGraspClass}, {'vector'}, 'GraspPlanningRequest', 'CandidateGrasps');
            
            javaArray = obj.JavaMessage.getCandidateGrasps;
            array = obj.writeJavaArray(candidategrasps, javaArray, obj.MoveitMsgsGraspClass);
            obj.JavaMessage.setCandidateGrasps(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.CandidateGrasps)
                obj.Cache.CandidateGrasps = [];
                obj.Cache.CandidateGrasps = obj.CandidateGrasps;
            end
        end
        
        function movableobstacles = get.MovableObstacles(obj)
            %get.MovableObstacles Get the value for property MovableObstacles
            if isempty(obj.Cache.MovableObstacles)
                javaArray = obj.JavaMessage.getMovableObstacles;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsCollisionObjectClass);
                obj.Cache.MovableObstacles = feval(obj.MoveitMsgsCollisionObjectClass, array);
            end
            movableobstacles = obj.Cache.MovableObstacles;
        end
        
        function set.MovableObstacles(obj, movableobstacles)
            %set.MovableObstacles Set the value for property MovableObstacles
            if ~isvector(movableobstacles) && isempty(movableobstacles)
                % Allow empty [] input
                movableobstacles = feval([obj.MoveitMsgsCollisionObjectClass '.empty'], 0, 1);
            end
            
            validateattributes(movableobstacles, {obj.MoveitMsgsCollisionObjectClass}, {'vector'}, 'GraspPlanningRequest', 'MovableObstacles');
            
            javaArray = obj.JavaMessage.getMovableObstacles;
            array = obj.writeJavaArray(movableobstacles, javaArray, obj.MoveitMsgsCollisionObjectClass);
            obj.JavaMessage.setMovableObstacles(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MovableObstacles)
                obj.Cache.MovableObstacles = [];
                obj.Cache.MovableObstacles = obj.MovableObstacles;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Target = [];
            obj.Cache.CandidateGrasps = [];
            obj.Cache.MovableObstacles = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.GroupName = obj.GroupName;
            cpObj.SupportSurfaces = obj.SupportSurfaces;
            
            % Recursively copy compound properties
            cpObj.Target = copy(obj.Target);
            cpObj.CandidateGrasps = copy(obj.CandidateGrasps);
            cpObj.MovableObstacles = copy(obj.MovableObstacles);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.GroupName = strObj.GroupName;
            obj.SupportSurfaces = strObj.SupportSurfaces;
            obj.Target = feval([obj.MoveitMsgsCollisionObjectClass '.loadobj'], strObj.Target);
            CandidateGraspsCell = arrayfun(@(x) feval([obj.MoveitMsgsGraspClass '.loadobj'], x), strObj.CandidateGrasps, 'UniformOutput', false);
            obj.CandidateGrasps = vertcat(CandidateGraspsCell{:});
            MovableObstaclesCell = arrayfun(@(x) feval([obj.MoveitMsgsCollisionObjectClass '.loadobj'], x), strObj.MovableObstacles, 'UniformOutput', false);
            obj.MovableObstacles = vertcat(MovableObstaclesCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.GroupName = obj.GroupName;
            strObj.SupportSurfaces = obj.SupportSurfaces;
            strObj.Target = saveobj(obj.Target);
            strObj.CandidateGrasps = arrayfun(@(x) saveobj(x), obj.CandidateGrasps);
            strObj.MovableObstacles = arrayfun(@(x) saveobj(x), obj.MovableObstacles);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.GraspPlanningRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.GraspPlanningRequest;
            obj.reload(strObj);
        end
    end
end
