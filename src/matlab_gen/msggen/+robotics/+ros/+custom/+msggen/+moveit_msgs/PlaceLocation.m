classdef PlaceLocation < robotics.ros.Message
    %PlaceLocation MATLAB implementation of moveit_msgs/PlaceLocation
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/PlaceLocation' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f3dbcaca40fb29ede2af78b3e1831128' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseStampedClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/PoseStamped') % Dispatch to MATLAB class for message type geometry_msgs/PoseStamped
        MoveitMsgsGripperTranslationClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/GripperTranslation') % Dispatch to MATLAB class for message type moveit_msgs/GripperTranslation
        TrajectoryMsgsJointTrajectoryClass = robotics.ros.msg.internal.MessageFactory.getClassForType('trajectory_msgs/JointTrajectory') % Dispatch to MATLAB class for message type trajectory_msgs/JointTrajectory
    end
    
    properties (Dependent)
        Id
        PostPlacePosture
        PlacePose
        PrePlaceApproach
        PostPlaceRetreat
        AllowedTouchObjects
    end
    
    properties (Access = protected)
        Cache = struct('PostPlacePosture', [], 'PlacePose', [], 'PrePlaceApproach', [], 'PostPlaceRetreat', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AllowedTouchObjects', 'Id', 'PlacePose', 'PostPlacePosture', 'PostPlaceRetreat', 'PrePlaceApproach'} % List of non-constant message properties
        ROSPropertyList = {'allowed_touch_objects', 'id', 'place_pose', 'post_place_posture', 'post_place_retreat', 'pre_place_approach'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = PlaceLocation(msg)
            %PlaceLocation Construct the message object PlaceLocation
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = char(obj.JavaMessage.getId);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'char'}, {}, 'PlaceLocation', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function postplaceposture = get.PostPlacePosture(obj)
            %get.PostPlacePosture Get the value for property PostPlacePosture
            if isempty(obj.Cache.PostPlacePosture)
                obj.Cache.PostPlacePosture = feval(obj.TrajectoryMsgsJointTrajectoryClass, obj.JavaMessage.getPostPlacePosture);
            end
            postplaceposture = obj.Cache.PostPlacePosture;
        end
        
        function set.PostPlacePosture(obj, postplaceposture)
            %set.PostPlacePosture Set the value for property PostPlacePosture
            validateattributes(postplaceposture, {obj.TrajectoryMsgsJointTrajectoryClass}, {'nonempty', 'scalar'}, 'PlaceLocation', 'PostPlacePosture');
            
            obj.JavaMessage.setPostPlacePosture(postplaceposture.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PostPlacePosture)
                obj.Cache.PostPlacePosture.setJavaObject(postplaceposture.getJavaObject);
            end
        end
        
        function placepose = get.PlacePose(obj)
            %get.PlacePose Get the value for property PlacePose
            if isempty(obj.Cache.PlacePose)
                obj.Cache.PlacePose = feval(obj.GeometryMsgsPoseStampedClass, obj.JavaMessage.getPlacePose);
            end
            placepose = obj.Cache.PlacePose;
        end
        
        function set.PlacePose(obj, placepose)
            %set.PlacePose Set the value for property PlacePose
            validateattributes(placepose, {obj.GeometryMsgsPoseStampedClass}, {'nonempty', 'scalar'}, 'PlaceLocation', 'PlacePose');
            
            obj.JavaMessage.setPlacePose(placepose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PlacePose)
                obj.Cache.PlacePose.setJavaObject(placepose.getJavaObject);
            end
        end
        
        function preplaceapproach = get.PrePlaceApproach(obj)
            %get.PrePlaceApproach Get the value for property PrePlaceApproach
            if isempty(obj.Cache.PrePlaceApproach)
                obj.Cache.PrePlaceApproach = feval(obj.MoveitMsgsGripperTranslationClass, obj.JavaMessage.getPrePlaceApproach);
            end
            preplaceapproach = obj.Cache.PrePlaceApproach;
        end
        
        function set.PrePlaceApproach(obj, preplaceapproach)
            %set.PrePlaceApproach Set the value for property PrePlaceApproach
            validateattributes(preplaceapproach, {obj.MoveitMsgsGripperTranslationClass}, {'nonempty', 'scalar'}, 'PlaceLocation', 'PrePlaceApproach');
            
            obj.JavaMessage.setPrePlaceApproach(preplaceapproach.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PrePlaceApproach)
                obj.Cache.PrePlaceApproach.setJavaObject(preplaceapproach.getJavaObject);
            end
        end
        
        function postplaceretreat = get.PostPlaceRetreat(obj)
            %get.PostPlaceRetreat Get the value for property PostPlaceRetreat
            if isempty(obj.Cache.PostPlaceRetreat)
                obj.Cache.PostPlaceRetreat = feval(obj.MoveitMsgsGripperTranslationClass, obj.JavaMessage.getPostPlaceRetreat);
            end
            postplaceretreat = obj.Cache.PostPlaceRetreat;
        end
        
        function set.PostPlaceRetreat(obj, postplaceretreat)
            %set.PostPlaceRetreat Set the value for property PostPlaceRetreat
            validateattributes(postplaceretreat, {obj.MoveitMsgsGripperTranslationClass}, {'nonempty', 'scalar'}, 'PlaceLocation', 'PostPlaceRetreat');
            
            obj.JavaMessage.setPostPlaceRetreat(postplaceretreat.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PostPlaceRetreat)
                obj.Cache.PostPlaceRetreat.setJavaObject(postplaceretreat.getJavaObject);
            end
        end
        
        function allowedtouchobjects = get.AllowedTouchObjects(obj)
            %get.AllowedTouchObjects Get the value for property AllowedTouchObjects
            javaArray = obj.JavaMessage.getAllowedTouchObjects;
            array = obj.readJavaArray(javaArray, 'char');
            allowedtouchobjects = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.AllowedTouchObjects(obj, allowedtouchobjects)
            %set.AllowedTouchObjects Set the value for property AllowedTouchObjects
            if ~isvector(allowedtouchobjects) && isempty(allowedtouchobjects)
                % Allow empty [] input
                allowedtouchobjects = cell.empty(0,1);
            end
            
            validateattributes(allowedtouchobjects, {'cell'}, {'vector'}, 'PlaceLocation', 'AllowedTouchObjects');
            if any(cellfun(@(x) ~ischar(x), allowedtouchobjects))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'allowedtouchobjects'));
            end
            
            javaArray = obj.JavaMessage.getAllowedTouchObjects;
            array = obj.writeJavaArray(allowedtouchobjects, javaArray, 'char');
            obj.JavaMessage.setAllowedTouchObjects(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.PostPlacePosture = [];
            obj.Cache.PlacePose = [];
            obj.Cache.PrePlaceApproach = [];
            obj.Cache.PostPlaceRetreat = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.AllowedTouchObjects = obj.AllowedTouchObjects;
            
            % Recursively copy compound properties
            cpObj.PostPlacePosture = copy(obj.PostPlacePosture);
            cpObj.PlacePose = copy(obj.PlacePose);
            cpObj.PrePlaceApproach = copy(obj.PrePlaceApproach);
            cpObj.PostPlaceRetreat = copy(obj.PostPlaceRetreat);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.AllowedTouchObjects = strObj.AllowedTouchObjects;
            obj.PostPlacePosture = feval([obj.TrajectoryMsgsJointTrajectoryClass '.loadobj'], strObj.PostPlacePosture);
            obj.PlacePose = feval([obj.GeometryMsgsPoseStampedClass '.loadobj'], strObj.PlacePose);
            obj.PrePlaceApproach = feval([obj.MoveitMsgsGripperTranslationClass '.loadobj'], strObj.PrePlaceApproach);
            obj.PostPlaceRetreat = feval([obj.MoveitMsgsGripperTranslationClass '.loadobj'], strObj.PostPlaceRetreat);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.AllowedTouchObjects = obj.AllowedTouchObjects;
            strObj.PostPlacePosture = saveobj(obj.PostPlacePosture);
            strObj.PlacePose = saveobj(obj.PlacePose);
            strObj.PrePlaceApproach = saveobj(obj.PrePlaceApproach);
            strObj.PostPlaceRetreat = saveobj(obj.PostPlaceRetreat);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.PlaceLocation.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.PlaceLocation;
            obj.reload(strObj);
        end
    end
end
