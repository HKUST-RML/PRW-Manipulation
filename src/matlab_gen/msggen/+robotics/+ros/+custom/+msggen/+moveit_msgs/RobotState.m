classdef RobotState < robotics.ros.Message
    %RobotState MATLAB implementation of moveit_msgs/RobotState
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/RobotState' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '217a2e8e5547f4162b13a37db9cb4da4' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsAttachedCollisionObjectClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/AttachedCollisionObject') % Dispatch to MATLAB class for message type moveit_msgs/AttachedCollisionObject
        SensorMsgsJointStateClass = robotics.ros.msg.internal.MessageFactory.getClassForType('sensor_msgs/JointState') % Dispatch to MATLAB class for message type sensor_msgs/JointState
        SensorMsgsMultiDOFJointStateClass = robotics.ros.msg.internal.MessageFactory.getClassForType('sensor_msgs/MultiDOFJointState') % Dispatch to MATLAB class for message type sensor_msgs/MultiDOFJointState
    end
    
    properties (Dependent)
        JointState
        MultiDofJointState
        IsDiff
        AttachedCollisionObjects
    end
    
    properties (Access = protected)
        Cache = struct('JointState', [], 'MultiDofJointState', [], 'AttachedCollisionObjects', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AttachedCollisionObjects', 'IsDiff', 'JointState', 'MultiDofJointState'} % List of non-constant message properties
        ROSPropertyList = {'attached_collision_objects', 'is_diff', 'joint_state', 'multi_dof_joint_state'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = RobotState(msg)
            %RobotState Construct the message object RobotState
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function jointstate = get.JointState(obj)
            %get.JointState Get the value for property JointState
            if isempty(obj.Cache.JointState)
                obj.Cache.JointState = feval(obj.SensorMsgsJointStateClass, obj.JavaMessage.getJointState);
            end
            jointstate = obj.Cache.JointState;
        end
        
        function set.JointState(obj, jointstate)
            %set.JointState Set the value for property JointState
            validateattributes(jointstate, {obj.SensorMsgsJointStateClass}, {'nonempty', 'scalar'}, 'RobotState', 'JointState');
            
            obj.JavaMessage.setJointState(jointstate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.JointState)
                obj.Cache.JointState.setJavaObject(jointstate.getJavaObject);
            end
        end
        
        function multidofjointstate = get.MultiDofJointState(obj)
            %get.MultiDofJointState Get the value for property MultiDofJointState
            if isempty(obj.Cache.MultiDofJointState)
                obj.Cache.MultiDofJointState = feval(obj.SensorMsgsMultiDOFJointStateClass, obj.JavaMessage.getMultiDofJointState);
            end
            multidofjointstate = obj.Cache.MultiDofJointState;
        end
        
        function set.MultiDofJointState(obj, multidofjointstate)
            %set.MultiDofJointState Set the value for property MultiDofJointState
            validateattributes(multidofjointstate, {obj.SensorMsgsMultiDOFJointStateClass}, {'nonempty', 'scalar'}, 'RobotState', 'MultiDofJointState');
            
            obj.JavaMessage.setMultiDofJointState(multidofjointstate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MultiDofJointState)
                obj.Cache.MultiDofJointState.setJavaObject(multidofjointstate.getJavaObject);
            end
        end
        
        function isdiff = get.IsDiff(obj)
            %get.IsDiff Get the value for property IsDiff
            isdiff = logical(obj.JavaMessage.getIsDiff);
        end
        
        function set.IsDiff(obj, isdiff)
            %set.IsDiff Set the value for property IsDiff
            validateattributes(isdiff, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'RobotState', 'IsDiff');
            
            obj.JavaMessage.setIsDiff(isdiff);
        end
        
        function attachedcollisionobjects = get.AttachedCollisionObjects(obj)
            %get.AttachedCollisionObjects Get the value for property AttachedCollisionObjects
            if isempty(obj.Cache.AttachedCollisionObjects)
                javaArray = obj.JavaMessage.getAttachedCollisionObjects;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsAttachedCollisionObjectClass);
                obj.Cache.AttachedCollisionObjects = feval(obj.MoveitMsgsAttachedCollisionObjectClass, array);
            end
            attachedcollisionobjects = obj.Cache.AttachedCollisionObjects;
        end
        
        function set.AttachedCollisionObjects(obj, attachedcollisionobjects)
            %set.AttachedCollisionObjects Set the value for property AttachedCollisionObjects
            if ~isvector(attachedcollisionobjects) && isempty(attachedcollisionobjects)
                % Allow empty [] input
                attachedcollisionobjects = feval([obj.MoveitMsgsAttachedCollisionObjectClass '.empty'], 0, 1);
            end
            
            validateattributes(attachedcollisionobjects, {obj.MoveitMsgsAttachedCollisionObjectClass}, {'vector'}, 'RobotState', 'AttachedCollisionObjects');
            
            javaArray = obj.JavaMessage.getAttachedCollisionObjects;
            array = obj.writeJavaArray(attachedcollisionobjects, javaArray, obj.MoveitMsgsAttachedCollisionObjectClass);
            obj.JavaMessage.setAttachedCollisionObjects(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.AttachedCollisionObjects)
                obj.Cache.AttachedCollisionObjects = [];
                obj.Cache.AttachedCollisionObjects = obj.AttachedCollisionObjects;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.JointState = [];
            obj.Cache.MultiDofJointState = [];
            obj.Cache.AttachedCollisionObjects = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.IsDiff = obj.IsDiff;
            
            % Recursively copy compound properties
            cpObj.JointState = copy(obj.JointState);
            cpObj.MultiDofJointState = copy(obj.MultiDofJointState);
            cpObj.AttachedCollisionObjects = copy(obj.AttachedCollisionObjects);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.IsDiff = strObj.IsDiff;
            obj.JointState = feval([obj.SensorMsgsJointStateClass '.loadobj'], strObj.JointState);
            obj.MultiDofJointState = feval([obj.SensorMsgsMultiDOFJointStateClass '.loadobj'], strObj.MultiDofJointState);
            AttachedCollisionObjectsCell = arrayfun(@(x) feval([obj.MoveitMsgsAttachedCollisionObjectClass '.loadobj'], x), strObj.AttachedCollisionObjects, 'UniformOutput', false);
            obj.AttachedCollisionObjects = vertcat(AttachedCollisionObjectsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.IsDiff = obj.IsDiff;
            strObj.JointState = saveobj(obj.JointState);
            strObj.MultiDofJointState = saveobj(obj.MultiDofJointState);
            strObj.AttachedCollisionObjects = arrayfun(@(x) saveobj(x), obj.AttachedCollisionObjects);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.RobotState.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.RobotState;
            obj.reload(strObj);
        end
    end
end
