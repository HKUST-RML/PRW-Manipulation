classdef GetPositionFKRequest < robotics.ros.Message
    %GetPositionFKRequest MATLAB implementation of moveit_msgs/GetPositionFKRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/GetPositionFKRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1d1ed72044ed56f6246c31b522781797' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsRobotStateClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/RobotState') % Dispatch to MATLAB class for message type moveit_msgs/RobotState
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        RobotState
        FkLinkNames
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'RobotState', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'FkLinkNames', 'Header', 'RobotState'} % List of non-constant message properties
        ROSPropertyList = {'fk_link_names', 'header', 'robot_state'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GetPositionFKRequest(msg)
            %GetPositionFKRequest Construct the message object GetPositionFKRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'GetPositionFKRequest', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function robotstate = get.RobotState(obj)
            %get.RobotState Get the value for property RobotState
            if isempty(obj.Cache.RobotState)
                obj.Cache.RobotState = feval(obj.MoveitMsgsRobotStateClass, obj.JavaMessage.getRobotState);
            end
            robotstate = obj.Cache.RobotState;
        end
        
        function set.RobotState(obj, robotstate)
            %set.RobotState Set the value for property RobotState
            validateattributes(robotstate, {obj.MoveitMsgsRobotStateClass}, {'nonempty', 'scalar'}, 'GetPositionFKRequest', 'RobotState');
            
            obj.JavaMessage.setRobotState(robotstate.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.RobotState)
                obj.Cache.RobotState.setJavaObject(robotstate.getJavaObject);
            end
        end
        
        function fklinknames = get.FkLinkNames(obj)
            %get.FkLinkNames Get the value for property FkLinkNames
            javaArray = obj.JavaMessage.getFkLinkNames;
            array = obj.readJavaArray(javaArray, 'char');
            fklinknames = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.FkLinkNames(obj, fklinknames)
            %set.FkLinkNames Set the value for property FkLinkNames
            if ~isvector(fklinknames) && isempty(fklinknames)
                % Allow empty [] input
                fklinknames = cell.empty(0,1);
            end
            
            validateattributes(fklinknames, {'cell'}, {'vector'}, 'GetPositionFKRequest', 'FkLinkNames');
            if any(cellfun(@(x) ~ischar(x), fklinknames))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'fklinknames'));
            end
            
            javaArray = obj.JavaMessage.getFkLinkNames;
            array = obj.writeJavaArray(fklinknames, javaArray, 'char');
            obj.JavaMessage.setFkLinkNames(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.RobotState = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.FkLinkNames = obj.FkLinkNames;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.RobotState = copy(obj.RobotState);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FkLinkNames = strObj.FkLinkNames;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.RobotState = feval([obj.MoveitMsgsRobotStateClass '.loadobj'], strObj.RobotState);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FkLinkNames = obj.FkLinkNames;
            strObj.Header = saveobj(obj.Header);
            strObj.RobotState = saveobj(obj.RobotState);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.GetPositionFKRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.GetPositionFKRequest;
            obj.reload(strObj);
        end
    end
end
