classdef PlanningSceneWorld < robotics.ros.Message
    %PlanningSceneWorld MATLAB implementation of moveit_msgs/PlanningSceneWorld
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/PlanningSceneWorld' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '373d88390d1db385335639f687723ee6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsCollisionObjectClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/CollisionObject') % Dispatch to MATLAB class for message type moveit_msgs/CollisionObject
        OctomapMsgsOctomapWithPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('octomap_msgs/OctomapWithPose') % Dispatch to MATLAB class for message type octomap_msgs/OctomapWithPose
    end
    
    properties (Dependent)
        Octomap
        CollisionObjects
    end
    
    properties (Access = protected)
        Cache = struct('CollisionObjects', [], 'Octomap', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CollisionObjects', 'Octomap'} % List of non-constant message properties
        ROSPropertyList = {'collision_objects', 'octomap'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = PlanningSceneWorld(msg)
            %PlanningSceneWorld Construct the message object PlanningSceneWorld
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function octomap = get.Octomap(obj)
            %get.Octomap Get the value for property Octomap
            if isempty(obj.Cache.Octomap)
                obj.Cache.Octomap = feval(obj.OctomapMsgsOctomapWithPoseClass, obj.JavaMessage.getOctomap);
            end
            octomap = obj.Cache.Octomap;
        end
        
        function set.Octomap(obj, octomap)
            %set.Octomap Set the value for property Octomap
            validateattributes(octomap, {obj.OctomapMsgsOctomapWithPoseClass}, {'nonempty', 'scalar'}, 'PlanningSceneWorld', 'Octomap');
            
            obj.JavaMessage.setOctomap(octomap.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Octomap)
                obj.Cache.Octomap.setJavaObject(octomap.getJavaObject);
            end
        end
        
        function collisionobjects = get.CollisionObjects(obj)
            %get.CollisionObjects Get the value for property CollisionObjects
            if isempty(obj.Cache.CollisionObjects)
                javaArray = obj.JavaMessage.getCollisionObjects;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsCollisionObjectClass);
                obj.Cache.CollisionObjects = feval(obj.MoveitMsgsCollisionObjectClass, array);
            end
            collisionobjects = obj.Cache.CollisionObjects;
        end
        
        function set.CollisionObjects(obj, collisionobjects)
            %set.CollisionObjects Set the value for property CollisionObjects
            if ~isvector(collisionobjects) && isempty(collisionobjects)
                % Allow empty [] input
                collisionobjects = feval([obj.MoveitMsgsCollisionObjectClass '.empty'], 0, 1);
            end
            
            validateattributes(collisionobjects, {obj.MoveitMsgsCollisionObjectClass}, {'vector'}, 'PlanningSceneWorld', 'CollisionObjects');
            
            javaArray = obj.JavaMessage.getCollisionObjects;
            array = obj.writeJavaArray(collisionobjects, javaArray, obj.MoveitMsgsCollisionObjectClass);
            obj.JavaMessage.setCollisionObjects(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.CollisionObjects)
                obj.Cache.CollisionObjects = [];
                obj.Cache.CollisionObjects = obj.CollisionObjects;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.CollisionObjects = [];
            obj.Cache.Octomap = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Octomap = copy(obj.Octomap);
            cpObj.CollisionObjects = copy(obj.CollisionObjects);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Octomap = feval([obj.OctomapMsgsOctomapWithPoseClass '.loadobj'], strObj.Octomap);
            CollisionObjectsCell = arrayfun(@(x) feval([obj.MoveitMsgsCollisionObjectClass '.loadobj'], x), strObj.CollisionObjects, 'UniformOutput', false);
            obj.CollisionObjects = vertcat(CollisionObjectsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Octomap = saveobj(obj.Octomap);
            strObj.CollisionObjects = arrayfun(@(x) saveobj(x), obj.CollisionObjects);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.PlanningSceneWorld.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.PlanningSceneWorld;
            obj.reload(strObj);
        end
    end
end
