classdef KinematicSolverInfo < robotics.ros.Message
    %KinematicSolverInfo MATLAB implementation of moveit_msgs/KinematicSolverInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/KinematicSolverInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'cc048557c0f9795c392dd80f8bb00489' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsJointLimitsClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/JointLimits') % Dispatch to MATLAB class for message type moveit_msgs/JointLimits
    end
    
    properties (Dependent)
        JointNames
        Limits
        LinkNames
    end
    
    properties (Access = protected)
        Cache = struct('Limits', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'JointNames', 'Limits', 'LinkNames'} % List of non-constant message properties
        ROSPropertyList = {'joint_names', 'limits', 'link_names'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = KinematicSolverInfo(msg)
            %KinematicSolverInfo Construct the message object KinematicSolverInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function jointnames = get.JointNames(obj)
            %get.JointNames Get the value for property JointNames
            javaArray = obj.JavaMessage.getJointNames;
            array = obj.readJavaArray(javaArray, 'char');
            jointnames = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.JointNames(obj, jointnames)
            %set.JointNames Set the value for property JointNames
            if ~isvector(jointnames) && isempty(jointnames)
                % Allow empty [] input
                jointnames = cell.empty(0,1);
            end
            
            validateattributes(jointnames, {'cell'}, {'vector'}, 'KinematicSolverInfo', 'JointNames');
            if any(cellfun(@(x) ~ischar(x), jointnames))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'jointnames'));
            end
            
            javaArray = obj.JavaMessage.getJointNames;
            array = obj.writeJavaArray(jointnames, javaArray, 'char');
            obj.JavaMessage.setJointNames(array);
        end
        
        function limits = get.Limits(obj)
            %get.Limits Get the value for property Limits
            if isempty(obj.Cache.Limits)
                javaArray = obj.JavaMessage.getLimits;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsJointLimitsClass);
                obj.Cache.Limits = feval(obj.MoveitMsgsJointLimitsClass, array);
            end
            limits = obj.Cache.Limits;
        end
        
        function set.Limits(obj, limits)
            %set.Limits Set the value for property Limits
            if ~isvector(limits) && isempty(limits)
                % Allow empty [] input
                limits = feval([obj.MoveitMsgsJointLimitsClass '.empty'], 0, 1);
            end
            
            validateattributes(limits, {obj.MoveitMsgsJointLimitsClass}, {'vector'}, 'KinematicSolverInfo', 'Limits');
            
            javaArray = obj.JavaMessage.getLimits;
            array = obj.writeJavaArray(limits, javaArray, obj.MoveitMsgsJointLimitsClass);
            obj.JavaMessage.setLimits(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Limits)
                obj.Cache.Limits = [];
                obj.Cache.Limits = obj.Limits;
            end
        end
        
        function linknames = get.LinkNames(obj)
            %get.LinkNames Get the value for property LinkNames
            javaArray = obj.JavaMessage.getLinkNames;
            array = obj.readJavaArray(javaArray, 'char');
            linknames = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.LinkNames(obj, linknames)
            %set.LinkNames Set the value for property LinkNames
            if ~isvector(linknames) && isempty(linknames)
                % Allow empty [] input
                linknames = cell.empty(0,1);
            end
            
            validateattributes(linknames, {'cell'}, {'vector'}, 'KinematicSolverInfo', 'LinkNames');
            if any(cellfun(@(x) ~ischar(x), linknames))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'linknames'));
            end
            
            javaArray = obj.JavaMessage.getLinkNames;
            array = obj.writeJavaArray(linknames, javaArray, 'char');
            obj.JavaMessage.setLinkNames(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Limits = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.JointNames = obj.JointNames;
            cpObj.LinkNames = obj.LinkNames;
            
            % Recursively copy compound properties
            cpObj.Limits = copy(obj.Limits);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.JointNames = strObj.JointNames;
            obj.LinkNames = strObj.LinkNames;
            LimitsCell = arrayfun(@(x) feval([obj.MoveitMsgsJointLimitsClass '.loadobj'], x), strObj.Limits, 'UniformOutput', false);
            obj.Limits = vertcat(LimitsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.JointNames = obj.JointNames;
            strObj.LinkNames = obj.LinkNames;
            strObj.Limits = arrayfun(@(x) saveobj(x), obj.Limits);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.KinematicSolverInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.KinematicSolverInfo;
            obj.reload(strObj);
        end
    end
end
