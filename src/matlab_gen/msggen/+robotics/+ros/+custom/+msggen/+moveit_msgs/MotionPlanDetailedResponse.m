classdef MotionPlanDetailedResponse < robotics.ros.Message
    %MotionPlanDetailedResponse MATLAB implementation of moveit_msgs/MotionPlanDetailedResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/MotionPlanDetailedResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7b84c374bb2e37bdc0eba664f7636a8f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsMoveItErrorCodesClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/MoveItErrorCodes') % Dispatch to MATLAB class for message type moveit_msgs/MoveItErrorCodes
        MoveitMsgsRobotStateClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/RobotState') % Dispatch to MATLAB class for message type moveit_msgs/RobotState
        MoveitMsgsRobotTrajectoryClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/RobotTrajectory') % Dispatch to MATLAB class for message type moveit_msgs/RobotTrajectory
    end
    
    properties (Dependent)
        TrajectoryStart
        GroupName
        ErrorCode
        Trajectory
        Description
        ProcessingTime
    end
    
    properties (Access = protected)
        Cache = struct('TrajectoryStart', [], 'Trajectory', [], 'ErrorCode', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Description', 'ErrorCode', 'GroupName', 'ProcessingTime', 'Trajectory', 'TrajectoryStart'} % List of non-constant message properties
        ROSPropertyList = {'description', 'error_code', 'group_name', 'processing_time', 'trajectory', 'trajectory_start'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = MotionPlanDetailedResponse(msg)
            %MotionPlanDetailedResponse Construct the message object MotionPlanDetailedResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function trajectorystart = get.TrajectoryStart(obj)
            %get.TrajectoryStart Get the value for property TrajectoryStart
            if isempty(obj.Cache.TrajectoryStart)
                obj.Cache.TrajectoryStart = feval(obj.MoveitMsgsRobotStateClass, obj.JavaMessage.getTrajectoryStart);
            end
            trajectorystart = obj.Cache.TrajectoryStart;
        end
        
        function set.TrajectoryStart(obj, trajectorystart)
            %set.TrajectoryStart Set the value for property TrajectoryStart
            validateattributes(trajectorystart, {obj.MoveitMsgsRobotStateClass}, {'nonempty', 'scalar'}, 'MotionPlanDetailedResponse', 'TrajectoryStart');
            
            obj.JavaMessage.setTrajectoryStart(trajectorystart.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.TrajectoryStart)
                obj.Cache.TrajectoryStart.setJavaObject(trajectorystart.getJavaObject);
            end
        end
        
        function groupname = get.GroupName(obj)
            %get.GroupName Get the value for property GroupName
            groupname = char(obj.JavaMessage.getGroupName);
        end
        
        function set.GroupName(obj, groupname)
            %set.GroupName Set the value for property GroupName
            validateattributes(groupname, {'char'}, {}, 'MotionPlanDetailedResponse', 'GroupName');
            
            obj.JavaMessage.setGroupName(groupname);
        end
        
        function errorcode = get.ErrorCode(obj)
            %get.ErrorCode Get the value for property ErrorCode
            if isempty(obj.Cache.ErrorCode)
                obj.Cache.ErrorCode = feval(obj.MoveitMsgsMoveItErrorCodesClass, obj.JavaMessage.getErrorCode);
            end
            errorcode = obj.Cache.ErrorCode;
        end
        
        function set.ErrorCode(obj, errorcode)
            %set.ErrorCode Set the value for property ErrorCode
            validateattributes(errorcode, {obj.MoveitMsgsMoveItErrorCodesClass}, {'nonempty', 'scalar'}, 'MotionPlanDetailedResponse', 'ErrorCode');
            
            obj.JavaMessage.setErrorCode(errorcode.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ErrorCode)
                obj.Cache.ErrorCode.setJavaObject(errorcode.getJavaObject);
            end
        end
        
        function trajectory = get.Trajectory(obj)
            %get.Trajectory Get the value for property Trajectory
            if isempty(obj.Cache.Trajectory)
                javaArray = obj.JavaMessage.getTrajectory;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsRobotTrajectoryClass);
                obj.Cache.Trajectory = feval(obj.MoveitMsgsRobotTrajectoryClass, array);
            end
            trajectory = obj.Cache.Trajectory;
        end
        
        function set.Trajectory(obj, trajectory)
            %set.Trajectory Set the value for property Trajectory
            if ~isvector(trajectory) && isempty(trajectory)
                % Allow empty [] input
                trajectory = feval([obj.MoveitMsgsRobotTrajectoryClass '.empty'], 0, 1);
            end
            
            validateattributes(trajectory, {obj.MoveitMsgsRobotTrajectoryClass}, {'vector'}, 'MotionPlanDetailedResponse', 'Trajectory');
            
            javaArray = obj.JavaMessage.getTrajectory;
            array = obj.writeJavaArray(trajectory, javaArray, obj.MoveitMsgsRobotTrajectoryClass);
            obj.JavaMessage.setTrajectory(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Trajectory)
                obj.Cache.Trajectory = [];
                obj.Cache.Trajectory = obj.Trajectory;
            end
        end
        
        function description = get.Description(obj)
            %get.Description Get the value for property Description
            javaArray = obj.JavaMessage.getDescription;
            array = obj.readJavaArray(javaArray, 'char');
            description = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.Description(obj, description)
            %set.Description Set the value for property Description
            if ~isvector(description) && isempty(description)
                % Allow empty [] input
                description = cell.empty(0,1);
            end
            
            validateattributes(description, {'cell'}, {'vector'}, 'MotionPlanDetailedResponse', 'Description');
            if any(cellfun(@(x) ~ischar(x), description))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'description'));
            end
            
            javaArray = obj.JavaMessage.getDescription;
            array = obj.writeJavaArray(description, javaArray, 'char');
            obj.JavaMessage.setDescription(array);
        end
        
        function processingtime = get.ProcessingTime(obj)
            %get.ProcessingTime Get the value for property ProcessingTime
            javaArray = obj.JavaMessage.getProcessingTime;
            array = obj.readJavaArray(javaArray, 'double');
            processingtime = double(array);
        end
        
        function set.ProcessingTime(obj, processingtime)
            %set.ProcessingTime Set the value for property ProcessingTime
            if ~isvector(processingtime) && isempty(processingtime)
                % Allow empty [] input
                processingtime = double.empty(0,1);
            end
            
            validateattributes(processingtime, {'numeric'}, {'vector'}, 'MotionPlanDetailedResponse', 'ProcessingTime');
            
            javaArray = obj.JavaMessage.getProcessingTime;
            array = obj.writeJavaArray(processingtime, javaArray, 'double');
            obj.JavaMessage.setProcessingTime(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.TrajectoryStart = [];
            obj.Cache.Trajectory = [];
            obj.Cache.ErrorCode = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.GroupName = obj.GroupName;
            cpObj.Description = obj.Description;
            cpObj.ProcessingTime = obj.ProcessingTime;
            
            % Recursively copy compound properties
            cpObj.TrajectoryStart = copy(obj.TrajectoryStart);
            cpObj.ErrorCode = copy(obj.ErrorCode);
            cpObj.Trajectory = copy(obj.Trajectory);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.GroupName = strObj.GroupName;
            obj.Description = strObj.Description;
            obj.ProcessingTime = strObj.ProcessingTime;
            obj.TrajectoryStart = feval([obj.MoveitMsgsRobotStateClass '.loadobj'], strObj.TrajectoryStart);
            obj.ErrorCode = feval([obj.MoveitMsgsMoveItErrorCodesClass '.loadobj'], strObj.ErrorCode);
            TrajectoryCell = arrayfun(@(x) feval([obj.MoveitMsgsRobotTrajectoryClass '.loadobj'], x), strObj.Trajectory, 'UniformOutput', false);
            obj.Trajectory = vertcat(TrajectoryCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.GroupName = obj.GroupName;
            strObj.Description = obj.Description;
            strObj.ProcessingTime = obj.ProcessingTime;
            strObj.TrajectoryStart = saveobj(obj.TrajectoryStart);
            strObj.ErrorCode = saveobj(obj.ErrorCode);
            strObj.Trajectory = arrayfun(@(x) saveobj(x), obj.Trajectory);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.MotionPlanDetailedResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.MotionPlanDetailedResponse;
            obj.reload(strObj);
        end
    end
end
