classdef OrientationConstraint < robotics.ros.Message
    %OrientationConstraint MATLAB implementation of moveit_msgs/OrientationConstraint
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/OrientationConstraint' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ab5cefb9bc4c0089620f5eb4caf4e59a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsQuaternionClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Quaternion') % Dispatch to MATLAB class for message type geometry_msgs/Quaternion
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Orientation
        LinkName
        AbsoluteXAxisTolerance
        AbsoluteYAxisTolerance
        AbsoluteZAxisTolerance
        Weight
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Orientation', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AbsoluteXAxisTolerance', 'AbsoluteYAxisTolerance', 'AbsoluteZAxisTolerance', 'Header', 'LinkName', 'Orientation', 'Weight'} % List of non-constant message properties
        ROSPropertyList = {'absolute_x_axis_tolerance', 'absolute_y_axis_tolerance', 'absolute_z_axis_tolerance', 'header', 'link_name', 'orientation', 'weight'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = OrientationConstraint(msg)
            %OrientationConstraint Construct the message object OrientationConstraint
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'OrientationConstraint', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function orientation = get.Orientation(obj)
            %get.Orientation Get the value for property Orientation
            if isempty(obj.Cache.Orientation)
                obj.Cache.Orientation = feval(obj.GeometryMsgsQuaternionClass, obj.JavaMessage.getOrientation);
            end
            orientation = obj.Cache.Orientation;
        end
        
        function set.Orientation(obj, orientation)
            %set.Orientation Set the value for property Orientation
            validateattributes(orientation, {obj.GeometryMsgsQuaternionClass}, {'nonempty', 'scalar'}, 'OrientationConstraint', 'Orientation');
            
            obj.JavaMessage.setOrientation(orientation.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Orientation)
                obj.Cache.Orientation.setJavaObject(orientation.getJavaObject);
            end
        end
        
        function linkname = get.LinkName(obj)
            %get.LinkName Get the value for property LinkName
            linkname = char(obj.JavaMessage.getLinkName);
        end
        
        function set.LinkName(obj, linkname)
            %set.LinkName Set the value for property LinkName
            validateattributes(linkname, {'char'}, {}, 'OrientationConstraint', 'LinkName');
            
            obj.JavaMessage.setLinkName(linkname);
        end
        
        function absolutexaxistolerance = get.AbsoluteXAxisTolerance(obj)
            %get.AbsoluteXAxisTolerance Get the value for property AbsoluteXAxisTolerance
            absolutexaxistolerance = double(obj.JavaMessage.getAbsoluteXAxisTolerance);
        end
        
        function set.AbsoluteXAxisTolerance(obj, absolutexaxistolerance)
            %set.AbsoluteXAxisTolerance Set the value for property AbsoluteXAxisTolerance
            validateattributes(absolutexaxistolerance, {'numeric'}, {'nonempty', 'scalar'}, 'OrientationConstraint', 'AbsoluteXAxisTolerance');
            
            obj.JavaMessage.setAbsoluteXAxisTolerance(absolutexaxistolerance);
        end
        
        function absoluteyaxistolerance = get.AbsoluteYAxisTolerance(obj)
            %get.AbsoluteYAxisTolerance Get the value for property AbsoluteYAxisTolerance
            absoluteyaxistolerance = double(obj.JavaMessage.getAbsoluteYAxisTolerance);
        end
        
        function set.AbsoluteYAxisTolerance(obj, absoluteyaxistolerance)
            %set.AbsoluteYAxisTolerance Set the value for property AbsoluteYAxisTolerance
            validateattributes(absoluteyaxistolerance, {'numeric'}, {'nonempty', 'scalar'}, 'OrientationConstraint', 'AbsoluteYAxisTolerance');
            
            obj.JavaMessage.setAbsoluteYAxisTolerance(absoluteyaxistolerance);
        end
        
        function absolutezaxistolerance = get.AbsoluteZAxisTolerance(obj)
            %get.AbsoluteZAxisTolerance Get the value for property AbsoluteZAxisTolerance
            absolutezaxistolerance = double(obj.JavaMessage.getAbsoluteZAxisTolerance);
        end
        
        function set.AbsoluteZAxisTolerance(obj, absolutezaxistolerance)
            %set.AbsoluteZAxisTolerance Set the value for property AbsoluteZAxisTolerance
            validateattributes(absolutezaxistolerance, {'numeric'}, {'nonempty', 'scalar'}, 'OrientationConstraint', 'AbsoluteZAxisTolerance');
            
            obj.JavaMessage.setAbsoluteZAxisTolerance(absolutezaxistolerance);
        end
        
        function weight = get.Weight(obj)
            %get.Weight Get the value for property Weight
            weight = double(obj.JavaMessage.getWeight);
        end
        
        function set.Weight(obj, weight)
            %set.Weight Set the value for property Weight
            validateattributes(weight, {'numeric'}, {'nonempty', 'scalar'}, 'OrientationConstraint', 'Weight');
            
            obj.JavaMessage.setWeight(weight);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Orientation = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.LinkName = obj.LinkName;
            cpObj.AbsoluteXAxisTolerance = obj.AbsoluteXAxisTolerance;
            cpObj.AbsoluteYAxisTolerance = obj.AbsoluteYAxisTolerance;
            cpObj.AbsoluteZAxisTolerance = obj.AbsoluteZAxisTolerance;
            cpObj.Weight = obj.Weight;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Orientation = copy(obj.Orientation);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LinkName = strObj.LinkName;
            obj.AbsoluteXAxisTolerance = strObj.AbsoluteXAxisTolerance;
            obj.AbsoluteYAxisTolerance = strObj.AbsoluteYAxisTolerance;
            obj.AbsoluteZAxisTolerance = strObj.AbsoluteZAxisTolerance;
            obj.Weight = strObj.Weight;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Orientation = feval([obj.GeometryMsgsQuaternionClass '.loadobj'], strObj.Orientation);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LinkName = obj.LinkName;
            strObj.AbsoluteXAxisTolerance = obj.AbsoluteXAxisTolerance;
            strObj.AbsoluteYAxisTolerance = obj.AbsoluteYAxisTolerance;
            strObj.AbsoluteZAxisTolerance = obj.AbsoluteZAxisTolerance;
            strObj.Weight = obj.Weight;
            strObj.Header = saveobj(obj.Header);
            strObj.Orientation = saveobj(obj.Orientation);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.OrientationConstraint.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.OrientationConstraint;
            obj.reload(strObj);
        end
    end
end
