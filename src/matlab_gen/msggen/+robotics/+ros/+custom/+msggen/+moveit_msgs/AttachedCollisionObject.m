classdef AttachedCollisionObject < robotics.ros.Message
    %AttachedCollisionObject MATLAB implementation of moveit_msgs/AttachedCollisionObject
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/AttachedCollisionObject' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '3ceac60b21e85bbd6c5b0ab9d476b752' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsCollisionObjectClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/CollisionObject') % Dispatch to MATLAB class for message type moveit_msgs/CollisionObject
        TrajectoryMsgsJointTrajectoryClass = robotics.ros.msg.internal.MessageFactory.getClassForType('trajectory_msgs/JointTrajectory') % Dispatch to MATLAB class for message type trajectory_msgs/JointTrajectory
    end
    
    properties (Dependent)
        LinkName
        Object
        DetachPosture
        Weight
        TouchLinks
    end
    
    properties (Access = protected)
        Cache = struct('Object', [], 'DetachPosture', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DetachPosture', 'LinkName', 'Object', 'TouchLinks', 'Weight'} % List of non-constant message properties
        ROSPropertyList = {'detach_posture', 'link_name', 'object', 'touch_links', 'weight'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = AttachedCollisionObject(msg)
            %AttachedCollisionObject Construct the message object AttachedCollisionObject
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function linkname = get.LinkName(obj)
            %get.LinkName Get the value for property LinkName
            linkname = char(obj.JavaMessage.getLinkName);
        end
        
        function set.LinkName(obj, linkname)
            %set.LinkName Set the value for property LinkName
            validateattributes(linkname, {'char'}, {}, 'AttachedCollisionObject', 'LinkName');
            
            obj.JavaMessage.setLinkName(linkname);
        end
        
        function object = get.Object(obj)
            %get.Object Get the value for property Object
            if isempty(obj.Cache.Object)
                obj.Cache.Object = feval(obj.MoveitMsgsCollisionObjectClass, obj.JavaMessage.getObject);
            end
            object = obj.Cache.Object;
        end
        
        function set.Object(obj, object)
            %set.Object Set the value for property Object
            validateattributes(object, {obj.MoveitMsgsCollisionObjectClass}, {'nonempty', 'scalar'}, 'AttachedCollisionObject', 'Object');
            
            obj.JavaMessage.setObject(object.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Object)
                obj.Cache.Object.setJavaObject(object.getJavaObject);
            end
        end
        
        function detachposture = get.DetachPosture(obj)
            %get.DetachPosture Get the value for property DetachPosture
            if isempty(obj.Cache.DetachPosture)
                obj.Cache.DetachPosture = feval(obj.TrajectoryMsgsJointTrajectoryClass, obj.JavaMessage.getDetachPosture);
            end
            detachposture = obj.Cache.DetachPosture;
        end
        
        function set.DetachPosture(obj, detachposture)
            %set.DetachPosture Set the value for property DetachPosture
            validateattributes(detachposture, {obj.TrajectoryMsgsJointTrajectoryClass}, {'nonempty', 'scalar'}, 'AttachedCollisionObject', 'DetachPosture');
            
            obj.JavaMessage.setDetachPosture(detachposture.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.DetachPosture)
                obj.Cache.DetachPosture.setJavaObject(detachposture.getJavaObject);
            end
        end
        
        function weight = get.Weight(obj)
            %get.Weight Get the value for property Weight
            weight = double(obj.JavaMessage.getWeight);
        end
        
        function set.Weight(obj, weight)
            %set.Weight Set the value for property Weight
            validateattributes(weight, {'numeric'}, {'nonempty', 'scalar'}, 'AttachedCollisionObject', 'Weight');
            
            obj.JavaMessage.setWeight(weight);
        end
        
        function touchlinks = get.TouchLinks(obj)
            %get.TouchLinks Get the value for property TouchLinks
            javaArray = obj.JavaMessage.getTouchLinks;
            array = obj.readJavaArray(javaArray, 'char');
            touchlinks = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.TouchLinks(obj, touchlinks)
            %set.TouchLinks Set the value for property TouchLinks
            if ~isvector(touchlinks) && isempty(touchlinks)
                % Allow empty [] input
                touchlinks = cell.empty(0,1);
            end
            
            validateattributes(touchlinks, {'cell'}, {'vector'}, 'AttachedCollisionObject', 'TouchLinks');
            if any(cellfun(@(x) ~ischar(x), touchlinks))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'touchlinks'));
            end
            
            javaArray = obj.JavaMessage.getTouchLinks;
            array = obj.writeJavaArray(touchlinks, javaArray, 'char');
            obj.JavaMessage.setTouchLinks(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Object = [];
            obj.Cache.DetachPosture = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.LinkName = obj.LinkName;
            cpObj.Weight = obj.Weight;
            cpObj.TouchLinks = obj.TouchLinks;
            
            % Recursively copy compound properties
            cpObj.Object = copy(obj.Object);
            cpObj.DetachPosture = copy(obj.DetachPosture);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LinkName = strObj.LinkName;
            obj.Weight = strObj.Weight;
            obj.TouchLinks = strObj.TouchLinks;
            obj.Object = feval([obj.MoveitMsgsCollisionObjectClass '.loadobj'], strObj.Object);
            obj.DetachPosture = feval([obj.TrajectoryMsgsJointTrajectoryClass '.loadobj'], strObj.DetachPosture);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LinkName = obj.LinkName;
            strObj.Weight = obj.Weight;
            strObj.TouchLinks = obj.TouchLinks;
            strObj.Object = saveobj(obj.Object);
            strObj.DetachPosture = saveobj(obj.DetachPosture);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.AttachedCollisionObject.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.AttachedCollisionObject;
            obj.reload(strObj);
        end
    end
end
