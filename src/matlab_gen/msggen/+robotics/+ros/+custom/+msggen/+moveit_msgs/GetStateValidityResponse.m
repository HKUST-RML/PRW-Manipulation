classdef GetStateValidityResponse < robotics.ros.Message
    %GetStateValidityResponse MATLAB implementation of moveit_msgs/GetStateValidityResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/GetStateValidityResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e326fb22b7448f29c0e726d9270d9929' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        MoveitMsgsConstraintEvalResultClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/ConstraintEvalResult') % Dispatch to MATLAB class for message type moveit_msgs/ConstraintEvalResult
        MoveitMsgsContactInformationClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/ContactInformation') % Dispatch to MATLAB class for message type moveit_msgs/ContactInformation
        MoveitMsgsCostSourceClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/CostSource') % Dispatch to MATLAB class for message type moveit_msgs/CostSource
    end
    
    properties (Dependent)
        Valid
        Contacts
        CostSources
        ConstraintResult
    end
    
    properties (Access = protected)
        Cache = struct('Contacts', [], 'CostSources', [], 'ConstraintResult', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ConstraintResult', 'Contacts', 'CostSources', 'Valid'} % List of non-constant message properties
        ROSPropertyList = {'constraint_result', 'contacts', 'cost_sources', 'valid'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GetStateValidityResponse(msg)
            %GetStateValidityResponse Construct the message object GetStateValidityResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function valid = get.Valid(obj)
            %get.Valid Get the value for property Valid
            valid = logical(obj.JavaMessage.getValid);
        end
        
        function set.Valid(obj, valid)
            %set.Valid Set the value for property Valid
            validateattributes(valid, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'GetStateValidityResponse', 'Valid');
            
            obj.JavaMessage.setValid(valid);
        end
        
        function contacts = get.Contacts(obj)
            %get.Contacts Get the value for property Contacts
            if isempty(obj.Cache.Contacts)
                javaArray = obj.JavaMessage.getContacts;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsContactInformationClass);
                obj.Cache.Contacts = feval(obj.MoveitMsgsContactInformationClass, array);
            end
            contacts = obj.Cache.Contacts;
        end
        
        function set.Contacts(obj, contacts)
            %set.Contacts Set the value for property Contacts
            if ~isvector(contacts) && isempty(contacts)
                % Allow empty [] input
                contacts = feval([obj.MoveitMsgsContactInformationClass '.empty'], 0, 1);
            end
            
            validateattributes(contacts, {obj.MoveitMsgsContactInformationClass}, {'vector'}, 'GetStateValidityResponse', 'Contacts');
            
            javaArray = obj.JavaMessage.getContacts;
            array = obj.writeJavaArray(contacts, javaArray, obj.MoveitMsgsContactInformationClass);
            obj.JavaMessage.setContacts(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Contacts)
                obj.Cache.Contacts = [];
                obj.Cache.Contacts = obj.Contacts;
            end
        end
        
        function costsources = get.CostSources(obj)
            %get.CostSources Get the value for property CostSources
            if isempty(obj.Cache.CostSources)
                javaArray = obj.JavaMessage.getCostSources;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsCostSourceClass);
                obj.Cache.CostSources = feval(obj.MoveitMsgsCostSourceClass, array);
            end
            costsources = obj.Cache.CostSources;
        end
        
        function set.CostSources(obj, costsources)
            %set.CostSources Set the value for property CostSources
            if ~isvector(costsources) && isempty(costsources)
                % Allow empty [] input
                costsources = feval([obj.MoveitMsgsCostSourceClass '.empty'], 0, 1);
            end
            
            validateattributes(costsources, {obj.MoveitMsgsCostSourceClass}, {'vector'}, 'GetStateValidityResponse', 'CostSources');
            
            javaArray = obj.JavaMessage.getCostSources;
            array = obj.writeJavaArray(costsources, javaArray, obj.MoveitMsgsCostSourceClass);
            obj.JavaMessage.setCostSources(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.CostSources)
                obj.Cache.CostSources = [];
                obj.Cache.CostSources = obj.CostSources;
            end
        end
        
        function constraintresult = get.ConstraintResult(obj)
            %get.ConstraintResult Get the value for property ConstraintResult
            if isempty(obj.Cache.ConstraintResult)
                javaArray = obj.JavaMessage.getConstraintResult;
                array = obj.readJavaArray(javaArray, obj.MoveitMsgsConstraintEvalResultClass);
                obj.Cache.ConstraintResult = feval(obj.MoveitMsgsConstraintEvalResultClass, array);
            end
            constraintresult = obj.Cache.ConstraintResult;
        end
        
        function set.ConstraintResult(obj, constraintresult)
            %set.ConstraintResult Set the value for property ConstraintResult
            if ~isvector(constraintresult) && isempty(constraintresult)
                % Allow empty [] input
                constraintresult = feval([obj.MoveitMsgsConstraintEvalResultClass '.empty'], 0, 1);
            end
            
            validateattributes(constraintresult, {obj.MoveitMsgsConstraintEvalResultClass}, {'vector'}, 'GetStateValidityResponse', 'ConstraintResult');
            
            javaArray = obj.JavaMessage.getConstraintResult;
            array = obj.writeJavaArray(constraintresult, javaArray, obj.MoveitMsgsConstraintEvalResultClass);
            obj.JavaMessage.setConstraintResult(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ConstraintResult)
                obj.Cache.ConstraintResult = [];
                obj.Cache.ConstraintResult = obj.ConstraintResult;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Contacts = [];
            obj.Cache.CostSources = [];
            obj.Cache.ConstraintResult = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Valid = obj.Valid;
            
            % Recursively copy compound properties
            cpObj.Contacts = copy(obj.Contacts);
            cpObj.CostSources = copy(obj.CostSources);
            cpObj.ConstraintResult = copy(obj.ConstraintResult);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Valid = strObj.Valid;
            ContactsCell = arrayfun(@(x) feval([obj.MoveitMsgsContactInformationClass '.loadobj'], x), strObj.Contacts, 'UniformOutput', false);
            obj.Contacts = vertcat(ContactsCell{:});
            CostSourcesCell = arrayfun(@(x) feval([obj.MoveitMsgsCostSourceClass '.loadobj'], x), strObj.CostSources, 'UniformOutput', false);
            obj.CostSources = vertcat(CostSourcesCell{:});
            ConstraintResultCell = arrayfun(@(x) feval([obj.MoveitMsgsConstraintEvalResultClass '.loadobj'], x), strObj.ConstraintResult, 'UniformOutput', false);
            obj.ConstraintResult = vertcat(ConstraintResultCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Valid = obj.Valid;
            strObj.Contacts = arrayfun(@(x) saveobj(x), obj.Contacts);
            strObj.CostSources = arrayfun(@(x) saveobj(x), obj.CostSources);
            strObj.ConstraintResult = arrayfun(@(x) saveobj(x), obj.ConstraintResult);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.GetStateValidityResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.GetStateValidityResponse;
            obj.reload(strObj);
        end
    end
end
