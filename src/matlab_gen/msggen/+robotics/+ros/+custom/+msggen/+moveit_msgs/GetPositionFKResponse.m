classdef GetPositionFKResponse < robotics.ros.Message
    %GetPositionFKResponse MATLAB implementation of moveit_msgs/GetPositionFKResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'moveit_msgs/GetPositionFKResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '297215cf4fdfe0008356995ae621dae6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseStampedClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/PoseStamped') % Dispatch to MATLAB class for message type geometry_msgs/PoseStamped
        MoveitMsgsMoveItErrorCodesClass = robotics.ros.msg.internal.MessageFactory.getClassForType('moveit_msgs/MoveItErrorCodes') % Dispatch to MATLAB class for message type moveit_msgs/MoveItErrorCodes
    end
    
    properties (Dependent)
        ErrorCode
        PoseStamped
        FkLinkNames
    end
    
    properties (Access = protected)
        Cache = struct('PoseStamped', [], 'ErrorCode', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ErrorCode', 'FkLinkNames', 'PoseStamped'} % List of non-constant message properties
        ROSPropertyList = {'error_code', 'fk_link_names', 'pose_stamped'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GetPositionFKResponse(msg)
            %GetPositionFKResponse Construct the message object GetPositionFKResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function errorcode = get.ErrorCode(obj)
            %get.ErrorCode Get the value for property ErrorCode
            if isempty(obj.Cache.ErrorCode)
                obj.Cache.ErrorCode = feval(obj.MoveitMsgsMoveItErrorCodesClass, obj.JavaMessage.getErrorCode);
            end
            errorcode = obj.Cache.ErrorCode;
        end
        
        function set.ErrorCode(obj, errorcode)
            %set.ErrorCode Set the value for property ErrorCode
            validateattributes(errorcode, {obj.MoveitMsgsMoveItErrorCodesClass}, {'nonempty', 'scalar'}, 'GetPositionFKResponse', 'ErrorCode');
            
            obj.JavaMessage.setErrorCode(errorcode.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ErrorCode)
                obj.Cache.ErrorCode.setJavaObject(errorcode.getJavaObject);
            end
        end
        
        function posestamped = get.PoseStamped(obj)
            %get.PoseStamped Get the value for property PoseStamped
            if isempty(obj.Cache.PoseStamped)
                javaArray = obj.JavaMessage.getPoseStamped;
                array = obj.readJavaArray(javaArray, obj.GeometryMsgsPoseStampedClass);
                obj.Cache.PoseStamped = feval(obj.GeometryMsgsPoseStampedClass, array);
            end
            posestamped = obj.Cache.PoseStamped;
        end
        
        function set.PoseStamped(obj, posestamped)
            %set.PoseStamped Set the value for property PoseStamped
            if ~isvector(posestamped) && isempty(posestamped)
                % Allow empty [] input
                posestamped = feval([obj.GeometryMsgsPoseStampedClass '.empty'], 0, 1);
            end
            
            validateattributes(posestamped, {obj.GeometryMsgsPoseStampedClass}, {'vector'}, 'GetPositionFKResponse', 'PoseStamped');
            
            javaArray = obj.JavaMessage.getPoseStamped;
            array = obj.writeJavaArray(posestamped, javaArray, obj.GeometryMsgsPoseStampedClass);
            obj.JavaMessage.setPoseStamped(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.PoseStamped)
                obj.Cache.PoseStamped = [];
                obj.Cache.PoseStamped = obj.PoseStamped;
            end
        end
        
        function fklinknames = get.FkLinkNames(obj)
            %get.FkLinkNames Get the value for property FkLinkNames
            javaArray = obj.JavaMessage.getFkLinkNames;
            array = obj.readJavaArray(javaArray, 'char');
            fklinknames = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.FkLinkNames(obj, fklinknames)
            %set.FkLinkNames Set the value for property FkLinkNames
            if ~isvector(fklinknames) && isempty(fklinknames)
                % Allow empty [] input
                fklinknames = cell.empty(0,1);
            end
            
            validateattributes(fklinknames, {'cell'}, {'vector'}, 'GetPositionFKResponse', 'FkLinkNames');
            if any(cellfun(@(x) ~ischar(x), fklinknames))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'fklinknames'));
            end
            
            javaArray = obj.JavaMessage.getFkLinkNames;
            array = obj.writeJavaArray(fklinknames, javaArray, 'char');
            obj.JavaMessage.setFkLinkNames(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.PoseStamped = [];
            obj.Cache.ErrorCode = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.FkLinkNames = obj.FkLinkNames;
            
            % Recursively copy compound properties
            cpObj.ErrorCode = copy(obj.ErrorCode);
            cpObj.PoseStamped = copy(obj.PoseStamped);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.FkLinkNames = strObj.FkLinkNames;
            obj.ErrorCode = feval([obj.MoveitMsgsMoveItErrorCodesClass '.loadobj'], strObj.ErrorCode);
            PoseStampedCell = arrayfun(@(x) feval([obj.GeometryMsgsPoseStampedClass '.loadobj'], x), strObj.PoseStamped, 'UniformOutput', false);
            obj.PoseStamped = vertcat(PoseStampedCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.FkLinkNames = obj.FkLinkNames;
            strObj.ErrorCode = saveobj(obj.ErrorCode);
            strObj.PoseStamped = arrayfun(@(x) saveobj(x), obj.PoseStamped);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.moveit_msgs.GetPositionFKResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.moveit_msgs.GetPositionFKResponse;
            obj.reload(strObj);
        end
    end
end
