classdef dual_arm_eff_msg < robotics.ros.Message
    %dual_arm_eff_msg MATLAB implementation of ur10_cm/dual_arm_eff_msg
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'ur10_cm/dual_arm_eff_msg' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ed9e1d286bd8f03ad213c307ed3832c4' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Pose') % Dispatch to MATLAB class for message type geometry_msgs/Pose
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        HongTargetPose
        KongTargetPose
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'HongTargetPose', [], 'KongTargetPose', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'HongTargetPose', 'KongTargetPose'} % List of non-constant message properties
        ROSPropertyList = {'header', 'hong_target_pose', 'kong_target_pose'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = dual_arm_eff_msg(msg)
            %dual_arm_eff_msg Construct the message object dual_arm_eff_msg
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'dual_arm_eff_msg', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function hongtargetpose = get.HongTargetPose(obj)
            %get.HongTargetPose Get the value for property HongTargetPose
            if isempty(obj.Cache.HongTargetPose)
                obj.Cache.HongTargetPose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getHongTargetPose);
            end
            hongtargetpose = obj.Cache.HongTargetPose;
        end
        
        function set.HongTargetPose(obj, hongtargetpose)
            %set.HongTargetPose Set the value for property HongTargetPose
            validateattributes(hongtargetpose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'dual_arm_eff_msg', 'HongTargetPose');
            
            obj.JavaMessage.setHongTargetPose(hongtargetpose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.HongTargetPose)
                obj.Cache.HongTargetPose.setJavaObject(hongtargetpose.getJavaObject);
            end
        end
        
        function kongtargetpose = get.KongTargetPose(obj)
            %get.KongTargetPose Get the value for property KongTargetPose
            if isempty(obj.Cache.KongTargetPose)
                obj.Cache.KongTargetPose = feval(obj.GeometryMsgsPoseClass, obj.JavaMessage.getKongTargetPose);
            end
            kongtargetpose = obj.Cache.KongTargetPose;
        end
        
        function set.KongTargetPose(obj, kongtargetpose)
            %set.KongTargetPose Set the value for property KongTargetPose
            validateattributes(kongtargetpose, {obj.GeometryMsgsPoseClass}, {'nonempty', 'scalar'}, 'dual_arm_eff_msg', 'KongTargetPose');
            
            obj.JavaMessage.setKongTargetPose(kongtargetpose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.KongTargetPose)
                obj.Cache.KongTargetPose.setJavaObject(kongtargetpose.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.HongTargetPose = [];
            obj.Cache.KongTargetPose = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.HongTargetPose = copy(obj.HongTargetPose);
            cpObj.KongTargetPose = copy(obj.KongTargetPose);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.HongTargetPose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.HongTargetPose);
            obj.KongTargetPose = feval([obj.GeometryMsgsPoseClass '.loadobj'], strObj.KongTargetPose);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Header = saveobj(obj.Header);
            strObj.HongTargetPose = saveobj(obj.HongTargetPose);
            strObj.KongTargetPose = saveobj(obj.KongTargetPose);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.ur10_cm.dual_arm_eff_msg.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.ur10_cm.dual_arm_eff_msg;
            obj.reload(strObj);
        end
    end
end
